// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame0v2.proto

#include "frame0v2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frame0v2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Avatar_frame0v2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frame0v2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Camera_frame0v2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frame0v2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mat3_frame0v2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frame0v2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVRTitle_frame0v2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frame0v2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_frame0v2_2eproto;
namespace ghostpacer {
class Vec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3> _instance;
} _Vec3_default_instance_;
class AvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Avatar> _instance;
} _Avatar_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera> _instance;
} _Camera_default_instance_;
class PVRTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PVRTitle> _instance;
} _PVRTitle_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class Mat3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mat3> _instance;
} _Mat3_default_instance_;
}  // namespace ghostpacer
static void InitDefaultsscc_info_Avatar_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_Avatar_default_instance_;
    new (ptr) ::ghostpacer::Avatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::Avatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Avatar_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Avatar_frame0v2_2eproto}, {
      &scc_info_Vec3_frame0v2_2eproto.base,}};

static void InitDefaultsscc_info_Camera_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_Camera_default_instance_;
    new (ptr) ::ghostpacer::Camera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::Camera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Camera_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Camera_frame0v2_2eproto}, {
      &scc_info_Vec3_frame0v2_2eproto.base,
      &scc_info_Mat3_frame0v2_2eproto.base,}};

static void InitDefaultsscc_info_Frame_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_Frame_default_instance_;
    new (ptr) ::ghostpacer::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Frame_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Frame_frame0v2_2eproto}, {
      &scc_info_Avatar_frame0v2_2eproto.base,
      &scc_info_PVRTitle_frame0v2_2eproto.base,
      &scc_info_Camera_frame0v2_2eproto.base,}};

static void InitDefaultsscc_info_Mat3_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_Mat3_default_instance_;
    new (ptr) ::ghostpacer::Mat3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::Mat3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mat3_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Mat3_frame0v2_2eproto}, {
      &scc_info_Vec3_frame0v2_2eproto.base,}};

static void InitDefaultsscc_info_PVRTitle_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_PVRTitle_default_instance_;
    new (ptr) ::ghostpacer::PVRTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::PVRTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVRTitle_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PVRTitle_frame0v2_2eproto}, {}};

static void InitDefaultsscc_info_Vec3_frame0v2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::_Vec3_default_instance_;
    new (ptr) ::ghostpacer::Vec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::Vec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_frame0v2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3_frame0v2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frame0v2_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frame0v2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frame0v2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frame0v2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Avatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Avatar, position_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Avatar, rotation_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Avatar, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Camera, position_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Camera, rotation_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Camera, rotmatrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::PVRTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::PVRTitle, line1_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::PVRTitle, line2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Frame, avatar_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Frame, pvrtitle_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Frame, camera_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Mat3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Mat3, row1_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Mat3, row2_),
  PROTOBUF_FIELD_OFFSET(::ghostpacer::Mat3, row3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ghostpacer::Vec3)},
  { 8, -1, sizeof(::ghostpacer::Avatar)},
  { 16, -1, sizeof(::ghostpacer::Camera)},
  { 24, -1, sizeof(::ghostpacer::PVRTitle)},
  { 31, -1, sizeof(::ghostpacer::Frame)},
  { 39, -1, sizeof(::ghostpacer::Mat3)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_Avatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_PVRTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ghostpacer::_Mat3_default_instance_),
};

const char descriptor_table_protodef_frame0v2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016frame0v2.proto\022\nghostpacer\"\'\n\004Vec3\022\t\n\001"
  "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"_\n\006Avatar\022"
  "\"\n\010position\030\001 \001(\0132\020.ghostpacer.Vec3\022\"\n\010r"
  "otation\030\002 \001(\0132\020.ghostpacer.Vec3\022\r\n\005phase"
  "\030\003 \001(\001\"u\n\006Camera\022\"\n\010position\030\001 \001(\0132\020.gho"
  "stpacer.Vec3\022\"\n\010rotation\030\002 \001(\0132\020.ghostpa"
  "cer.Vec3\022#\n\trotMatrix\030\003 \001(\0132\020.ghostpacer"
  ".Mat3\"(\n\010PVRTitle\022\r\n\005line1\030\001 \001(\t\022\r\n\005line"
  "2\030\002 \001(\t\"w\n\005Frame\022\"\n\006avatar\030\001 \001(\0132\022.ghost"
  "pacer.Avatar\022&\n\010pvrTitle\030\002 \001(\0132\024.ghostpa"
  "cer.PVRTitle\022\"\n\006camera\030\003 \001(\0132\022.ghostpace"
  "r.Camera\"f\n\004Mat3\022\036\n\004row1\030\001 \001(\0132\020.ghostpa"
  "cer.Vec3\022\036\n\004row2\030\002 \001(\0132\020.ghostpacer.Vec3"
  "\022\036\n\004row3\030\003 \001(\0132\020.ghostpacer.Vec3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frame0v2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frame0v2_2eproto_sccs[6] = {
  &scc_info_Avatar_frame0v2_2eproto.base,
  &scc_info_Camera_frame0v2_2eproto.base,
  &scc_info_Frame_frame0v2_2eproto.base,
  &scc_info_Mat3_frame0v2_2eproto.base,
  &scc_info_PVRTitle_frame0v2_2eproto.base,
  &scc_info_Vec3_frame0v2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frame0v2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frame0v2_2eproto = {
  false, false, descriptor_table_protodef_frame0v2_2eproto, "frame0v2.proto", 560,
  &descriptor_table_frame0v2_2eproto_once, descriptor_table_frame0v2_2eproto_sccs, descriptor_table_frame0v2_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_frame0v2_2eproto::offsets,
  file_level_metadata_frame0v2_2eproto, 6, file_level_enum_descriptors_frame0v2_2eproto, file_level_service_descriptors_frame0v2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frame0v2_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frame0v2_2eproto)), true);
namespace ghostpacer {

// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ghostpacer.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:ghostpacer.Vec3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3& Vec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.Vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Avatar::InitAsDefaultInstance() {
  ::ghostpacer::_Avatar_default_instance_._instance.get_mutable()->position_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
  ::ghostpacer::_Avatar_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
}
class Avatar::_Internal {
 public:
  static const ::ghostpacer::Vec3& position(const Avatar* msg);
  static const ::ghostpacer::Vec3& rotation(const Avatar* msg);
};

const ::ghostpacer::Vec3&
Avatar::_Internal::position(const Avatar* msg) {
  return *msg->position_;
}
const ::ghostpacer::Vec3&
Avatar::_Internal::rotation(const Avatar* msg) {
  return *msg->rotation_;
}
Avatar::Avatar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.Avatar)
}
Avatar::Avatar(const Avatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::ghostpacer::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::ghostpacer::Vec3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:ghostpacer.Avatar)
}

void Avatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Avatar_frame0v2_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&position_)) + sizeof(phase_));
}

Avatar::~Avatar() {
  // @@protoc_insertion_point(destructor:ghostpacer.Avatar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Avatar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void Avatar::ArenaDtor(void* object) {
  Avatar* _this = reinterpret_cast< Avatar* >(object);
  (void)_this;
}
void Avatar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Avatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Avatar& Avatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Avatar_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void Avatar::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.Avatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  phase_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Avatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ghostpacer.Vec3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Vec3 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Avatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.Avatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.Vec3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .ghostpacer.Vec3 rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  // double phase = 3;
  if (!(this->phase() <= 0 && this->phase() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.Avatar)
  return target;
}

size_t Avatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.Avatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ghostpacer.Vec3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ghostpacer.Vec3 rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // double phase = 3;
  if (!(this->phase() <= 0 && this->phase() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Avatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.Avatar)
  GOOGLE_DCHECK_NE(&from, this);
  const Avatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Avatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.Avatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.Avatar)
    MergeFrom(*source);
  }
}

void Avatar::MergeFrom(const Avatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.Avatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::ghostpacer::Vec3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::ghostpacer::Vec3::MergeFrom(from._internal_rotation());
  }
  if (!(from.phase() <= 0 && from.phase() >= 0)) {
    _internal_set_phase(from._internal_phase());
  }
}

void Avatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.Avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar::CopyFrom(const Avatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.Avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar::IsInitialized() const {
  return true;
}

void Avatar::InternalSwap(Avatar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Avatar, phase_)
      + sizeof(Avatar::phase_)
      - PROTOBUF_FIELD_OFFSET(Avatar, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Avatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Camera::InitAsDefaultInstance() {
  ::ghostpacer::_Camera_default_instance_._instance.get_mutable()->position_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
  ::ghostpacer::_Camera_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
  ::ghostpacer::_Camera_default_instance_._instance.get_mutable()->rotmatrix_ = const_cast< ::ghostpacer::Mat3*>(
      ::ghostpacer::Mat3::internal_default_instance());
}
class Camera::_Internal {
 public:
  static const ::ghostpacer::Vec3& position(const Camera* msg);
  static const ::ghostpacer::Vec3& rotation(const Camera* msg);
  static const ::ghostpacer::Mat3& rotmatrix(const Camera* msg);
};

const ::ghostpacer::Vec3&
Camera::_Internal::position(const Camera* msg) {
  return *msg->position_;
}
const ::ghostpacer::Vec3&
Camera::_Internal::rotation(const Camera* msg) {
  return *msg->rotation_;
}
const ::ghostpacer::Mat3&
Camera::_Internal::rotmatrix(const Camera* msg) {
  return *msg->rotmatrix_;
}
Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::ghostpacer::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::ghostpacer::Vec3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_rotmatrix()) {
    rotmatrix_ = new ::ghostpacer::Mat3(*from.rotmatrix_);
  } else {
    rotmatrix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.Camera)
}

void Camera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_frame0v2_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotmatrix_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotmatrix_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:ghostpacer.Camera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete rotmatrix_;
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera& Camera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArena() == nullptr && rotmatrix_ != nullptr) {
    delete rotmatrix_;
  }
  rotmatrix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ghostpacer.Vec3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Vec3 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Mat3 rotMatrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotmatrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.Vec3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .ghostpacer.Vec3 rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  // .ghostpacer.Mat3 rotMatrix = 3;
  if (this->has_rotmatrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotmatrix(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ghostpacer.Vec3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ghostpacer.Vec3 rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .ghostpacer.Mat3 rotMatrix = 3;
  if (this->has_rotmatrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotmatrix_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.Camera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::ghostpacer::Vec3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::ghostpacer::Vec3::MergeFrom(from._internal_rotation());
  }
  if (from.has_rotmatrix()) {
    _internal_mutable_rotmatrix()->::ghostpacer::Mat3::MergeFrom(from._internal_rotmatrix());
  }
}

void Camera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, rotmatrix_)
      + sizeof(Camera::rotmatrix_)
      - PROTOBUF_FIELD_OFFSET(Camera, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PVRTitle::InitAsDefaultInstance() {
}
class PVRTitle::_Internal {
 public:
};

PVRTitle::PVRTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.PVRTitle)
}
PVRTitle::PVRTitle(const PVRTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line1().empty()) {
    line1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line1(),
      GetArena());
  }
  line2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line2().empty()) {
    line2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_line2(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.PVRTitle)
}

void PVRTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PVRTitle_frame0v2_2eproto.base);
  line1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PVRTitle::~PVRTitle() {
  // @@protoc_insertion_point(destructor:ghostpacer.PVRTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PVRTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  line1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PVRTitle::ArenaDtor(void* object) {
  PVRTitle* _this = reinterpret_cast< PVRTitle* >(object);
  (void)_this;
}
void PVRTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PVRTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PVRTitle& PVRTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PVRTitle_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void PVRTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.PVRTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PVRTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string line1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_line1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ghostpacer.PVRTitle.line1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_line2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ghostpacer.PVRTitle.line2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PVRTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.PVRTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string line1 = 1;
  if (this->line1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line1().data(), static_cast<int>(this->_internal_line1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.PVRTitle.line1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_line1(), target);
  }

  // string line2 = 2;
  if (this->line2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line2().data(), static_cast<int>(this->_internal_line2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.PVRTitle.line2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_line2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.PVRTitle)
  return target;
}

size_t PVRTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.PVRTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string line1 = 1;
  if (this->line1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line1());
  }

  // string line2 = 2;
  if (this->line2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVRTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.PVRTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const PVRTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PVRTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.PVRTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.PVRTitle)
    MergeFrom(*source);
  }
}

void PVRTitle::MergeFrom(const PVRTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.PVRTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line1().size() > 0) {
    _internal_set_line1(from._internal_line1());
  }
  if (from.line2().size() > 0) {
    _internal_set_line2(from._internal_line2());
  }
}

void PVRTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.PVRTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVRTitle::CopyFrom(const PVRTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.PVRTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVRTitle::IsInitialized() const {
  return true;
}

void PVRTitle::InternalSwap(PVRTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  line1_.Swap(&other->line1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line2_.Swap(&other->line2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PVRTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::ghostpacer::_Frame_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::ghostpacer::Avatar*>(
      ::ghostpacer::Avatar::internal_default_instance());
  ::ghostpacer::_Frame_default_instance_._instance.get_mutable()->pvrtitle_ = const_cast< ::ghostpacer::PVRTitle*>(
      ::ghostpacer::PVRTitle::internal_default_instance());
  ::ghostpacer::_Frame_default_instance_._instance.get_mutable()->camera_ = const_cast< ::ghostpacer::Camera*>(
      ::ghostpacer::Camera::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const ::ghostpacer::Avatar& avatar(const Frame* msg);
  static const ::ghostpacer::PVRTitle& pvrtitle(const Frame* msg);
  static const ::ghostpacer::Camera& camera(const Frame* msg);
};

const ::ghostpacer::Avatar&
Frame::_Internal::avatar(const Frame* msg) {
  return *msg->avatar_;
}
const ::ghostpacer::PVRTitle&
Frame::_Internal::pvrtitle(const Frame* msg) {
  return *msg->pvrtitle_;
}
const ::ghostpacer::Camera&
Frame::_Internal::camera(const Frame* msg) {
  return *msg->camera_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_avatar()) {
    avatar_ = new ::ghostpacer::Avatar(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_pvrtitle()) {
    pvrtitle_ = new ::ghostpacer::PVRTitle(*from.pvrtitle_);
  } else {
    pvrtitle_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::ghostpacer::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_frame0v2_2eproto.base);
  ::memset(&avatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_) -
      reinterpret_cast<char*>(&avatar_)) + sizeof(camera_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:ghostpacer.Frame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete pvrtitle_;
  if (this != internal_default_instance()) delete camera_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && avatar_ != nullptr) {
    delete avatar_;
  }
  avatar_ = nullptr;
  if (GetArena() == nullptr && pvrtitle_ != nullptr) {
    delete pvrtitle_;
  }
  pvrtitle_ = nullptr;
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ghostpacer.Avatar avatar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.PVRTitle pvrTitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvrtitle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Camera camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.Avatar avatar = 1;
  if (this->has_avatar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::avatar(this), target, stream);
  }

  // .ghostpacer.PVRTitle pvrTitle = 2;
  if (this->has_pvrtitle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pvrtitle(this), target, stream);
  }

  // .ghostpacer.Camera camera = 3;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::camera(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ghostpacer.Avatar avatar = 1;
  if (this->has_avatar()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_);
  }

  // .ghostpacer.PVRTitle pvrTitle = 2;
  if (this->has_pvrtitle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pvrtitle_);
  }

  // .ghostpacer.Camera camera = 3;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar()) {
    _internal_mutable_avatar()->::ghostpacer::Avatar::MergeFrom(from._internal_avatar());
  }
  if (from.has_pvrtitle()) {
    _internal_mutable_pvrtitle()->::ghostpacer::PVRTitle::MergeFrom(from._internal_pvrtitle());
  }
  if (from.has_camera()) {
    _internal_mutable_camera()->::ghostpacer::Camera::MergeFrom(from._internal_camera());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, camera_)
      + sizeof(Frame::camera_)
      - PROTOBUF_FIELD_OFFSET(Frame, avatar_)>(
          reinterpret_cast<char*>(&avatar_),
          reinterpret_cast<char*>(&other->avatar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mat3::InitAsDefaultInstance() {
  ::ghostpacer::_Mat3_default_instance_._instance.get_mutable()->row1_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
  ::ghostpacer::_Mat3_default_instance_._instance.get_mutable()->row2_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
  ::ghostpacer::_Mat3_default_instance_._instance.get_mutable()->row3_ = const_cast< ::ghostpacer::Vec3*>(
      ::ghostpacer::Vec3::internal_default_instance());
}
class Mat3::_Internal {
 public:
  static const ::ghostpacer::Vec3& row1(const Mat3* msg);
  static const ::ghostpacer::Vec3& row2(const Mat3* msg);
  static const ::ghostpacer::Vec3& row3(const Mat3* msg);
};

const ::ghostpacer::Vec3&
Mat3::_Internal::row1(const Mat3* msg) {
  return *msg->row1_;
}
const ::ghostpacer::Vec3&
Mat3::_Internal::row2(const Mat3* msg) {
  return *msg->row2_;
}
const ::ghostpacer::Vec3&
Mat3::_Internal::row3(const Mat3* msg) {
  return *msg->row3_;
}
Mat3::Mat3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ghostpacer.Mat3)
}
Mat3::Mat3(const Mat3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row1()) {
    row1_ = new ::ghostpacer::Vec3(*from.row1_);
  } else {
    row1_ = nullptr;
  }
  if (from._internal_has_row2()) {
    row2_ = new ::ghostpacer::Vec3(*from.row2_);
  } else {
    row2_ = nullptr;
  }
  if (from._internal_has_row3()) {
    row3_ = new ::ghostpacer::Vec3(*from.row3_);
  } else {
    row3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.Mat3)
}

void Mat3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mat3_frame0v2_2eproto.base);
  ::memset(&row1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row3_) -
      reinterpret_cast<char*>(&row1_)) + sizeof(row3_));
}

Mat3::~Mat3() {
  // @@protoc_insertion_point(destructor:ghostpacer.Mat3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mat3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete row1_;
  if (this != internal_default_instance()) delete row2_;
  if (this != internal_default_instance()) delete row3_;
}

void Mat3::ArenaDtor(void* object) {
  Mat3* _this = reinterpret_cast< Mat3* >(object);
  (void)_this;
}
void Mat3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mat3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mat3& Mat3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mat3_frame0v2_2eproto.base);
  return *internal_default_instance();
}


void Mat3::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.Mat3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && row1_ != nullptr) {
    delete row1_;
  }
  row1_ = nullptr;
  if (GetArena() == nullptr && row2_ != nullptr) {
    delete row2_;
  }
  row2_ = nullptr;
  if (GetArena() == nullptr && row3_ != nullptr) {
    delete row3_;
  }
  row3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mat3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ghostpacer.Vec3 row1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_row1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Vec3 row2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ghostpacer.Vec3 row3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_row3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mat3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.Mat3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.Vec3 row1 = 1;
  if (this->has_row1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::row1(this), target, stream);
  }

  // .ghostpacer.Vec3 row2 = 2;
  if (this->has_row2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::row2(this), target, stream);
  }

  // .ghostpacer.Vec3 row3 = 3;
  if (this->has_row3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::row3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.Mat3)
  return target;
}

size_t Mat3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.Mat3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ghostpacer.Vec3 row1 = 1;
  if (this->has_row1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row1_);
  }

  // .ghostpacer.Vec3 row2 = 2;
  if (this->has_row2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row2_);
  }

  // .ghostpacer.Vec3 row3 = 3;
  if (this->has_row3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row3_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mat3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  const Mat3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mat3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.Mat3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.Mat3)
    MergeFrom(*source);
  }
}

void Mat3::MergeFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_row1()) {
    _internal_mutable_row1()->::ghostpacer::Vec3::MergeFrom(from._internal_row1());
  }
  if (from.has_row2()) {
    _internal_mutable_row2()->::ghostpacer::Vec3::MergeFrom(from._internal_row2());
  }
  if (from.has_row3()) {
    _internal_mutable_row3()->::ghostpacer::Vec3::MergeFrom(from._internal_row3());
  }
}

void Mat3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat3::CopyFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat3::IsInitialized() const {
  return true;
}

void Mat3::InternalSwap(Mat3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mat3, row3_)
      + sizeof(Mat3::row3_)
      - PROTOBUF_FIELD_OFFSET(Mat3, row1_)>(
          reinterpret_cast<char*>(&row1_),
          reinterpret_cast<char*>(&other->row1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mat3::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ghostpacer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ghostpacer::Vec3* Arena::CreateMaybeMessage< ::ghostpacer::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ghostpacer::Avatar* Arena::CreateMaybeMessage< ::ghostpacer::Avatar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::Avatar >(arena);
}
template<> PROTOBUF_NOINLINE ::ghostpacer::Camera* Arena::CreateMaybeMessage< ::ghostpacer::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::ghostpacer::PVRTitle* Arena::CreateMaybeMessage< ::ghostpacer::PVRTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::PVRTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::ghostpacer::Frame* Arena::CreateMaybeMessage< ::ghostpacer::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::ghostpacer::Mat3* Arena::CreateMaybeMessage< ::ghostpacer::Mat3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ghostpacer::Mat3 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
