// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame0v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frame0v1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frame0v1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frame0v1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frame0v1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frame0v1_2eproto;
namespace ghostpacer {
class Avatar;
class AvatarDefaultTypeInternal;
extern AvatarDefaultTypeInternal _Avatar_default_instance_;
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Mat3;
class Mat3DefaultTypeInternal;
extern Mat3DefaultTypeInternal _Mat3_default_instance_;
class PVRTitle;
class PVRTitleDefaultTypeInternal;
extern PVRTitleDefaultTypeInternal _PVRTitle_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace ghostpacer
PROTOBUF_NAMESPACE_OPEN
template<> ::ghostpacer::Avatar* Arena::CreateMaybeMessage<::ghostpacer::Avatar>(Arena*);
template<> ::ghostpacer::Camera* Arena::CreateMaybeMessage<::ghostpacer::Camera>(Arena*);
template<> ::ghostpacer::Frame* Arena::CreateMaybeMessage<::ghostpacer::Frame>(Arena*);
template<> ::ghostpacer::Mat3* Arena::CreateMaybeMessage<::ghostpacer::Mat3>(Arena*);
template<> ::ghostpacer::PVRTitle* Arena::CreateMaybeMessage<::ghostpacer::PVRTitle>(Arena*);
template<> ::ghostpacer::Vec3* Arena::CreateMaybeMessage<::ghostpacer::Vec3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ghostpacer {

// ===================================================================

class Vec3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.Vec3) */ {
 public:
  inline Vec3() : Vec3(nullptr) {}
  virtual ~Vec3();

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(nullptr);
  }

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.Vec3";
  }
  protected:
  explicit Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.Vec3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// -------------------------------------------------------------------

class Avatar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.Avatar) */ {
 public:
  inline Avatar() : Avatar(nullptr) {}
  virtual ~Avatar();

  Avatar(const Avatar& from);
  Avatar(Avatar&& from) noexcept
    : Avatar() {
    *this = ::std::move(from);
  }

  inline Avatar& operator=(const Avatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Avatar& operator=(Avatar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Avatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Avatar* internal_default_instance() {
    return reinterpret_cast<const Avatar*>(
               &_Avatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Avatar& a, Avatar& b) {
    a.Swap(&b);
  }
  inline void Swap(Avatar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Avatar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Avatar* New() const final {
    return CreateMaybeMessage<Avatar>(nullptr);
  }

  Avatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Avatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Avatar& from);
  void MergeFrom(const Avatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Avatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.Avatar";
  }
  protected:
  explicit Avatar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kPhaseFieldNumber = 3,
  };
  // .ghostpacer.Vec3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ghostpacer::Vec3& position() const;
  ::ghostpacer::Vec3* release_position();
  ::ghostpacer::Vec3* mutable_position();
  void set_allocated_position(::ghostpacer::Vec3* position);
  private:
  const ::ghostpacer::Vec3& _internal_position() const;
  ::ghostpacer::Vec3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ghostpacer::Vec3* position);
  ::ghostpacer::Vec3* unsafe_arena_release_position();

  // .ghostpacer.Vec3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ghostpacer::Vec3& rotation() const;
  ::ghostpacer::Vec3* release_rotation();
  ::ghostpacer::Vec3* mutable_rotation();
  void set_allocated_rotation(::ghostpacer::Vec3* rotation);
  private:
  const ::ghostpacer::Vec3& _internal_rotation() const;
  ::ghostpacer::Vec3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ghostpacer::Vec3* rotation);
  ::ghostpacer::Vec3* unsafe_arena_release_rotation();

  // double phase = 3;
  void clear_phase();
  double phase() const;
  void set_phase(double value);
  private:
  double _internal_phase() const;
  void _internal_set_phase(double value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.Avatar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::Vec3* position_;
  ::ghostpacer::Vec3* rotation_;
  double phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// -------------------------------------------------------------------

class Camera PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  virtual ~Camera();

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Camera* New() const final {
    return CreateMaybeMessage<Camera>(nullptr);
  }

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kRotMatrixFieldNumber = 3,
  };
  // .ghostpacer.Vec3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ghostpacer::Vec3& position() const;
  ::ghostpacer::Vec3* release_position();
  ::ghostpacer::Vec3* mutable_position();
  void set_allocated_position(::ghostpacer::Vec3* position);
  private:
  const ::ghostpacer::Vec3& _internal_position() const;
  ::ghostpacer::Vec3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ghostpacer::Vec3* position);
  ::ghostpacer::Vec3* unsafe_arena_release_position();

  // .ghostpacer.Vec3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ghostpacer::Vec3& rotation() const;
  ::ghostpacer::Vec3* release_rotation();
  ::ghostpacer::Vec3* mutable_rotation();
  void set_allocated_rotation(::ghostpacer::Vec3* rotation);
  private:
  const ::ghostpacer::Vec3& _internal_rotation() const;
  ::ghostpacer::Vec3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ghostpacer::Vec3* rotation);
  ::ghostpacer::Vec3* unsafe_arena_release_rotation();

  // .ghostpacer.Mat3 rotMatrix = 3;
  bool has_rotmatrix() const;
  private:
  bool _internal_has_rotmatrix() const;
  public:
  void clear_rotmatrix();
  const ::ghostpacer::Mat3& rotmatrix() const;
  ::ghostpacer::Mat3* release_rotmatrix();
  ::ghostpacer::Mat3* mutable_rotmatrix();
  void set_allocated_rotmatrix(::ghostpacer::Mat3* rotmatrix);
  private:
  const ::ghostpacer::Mat3& _internal_rotmatrix() const;
  ::ghostpacer::Mat3* _internal_mutable_rotmatrix();
  public:
  void unsafe_arena_set_allocated_rotmatrix(
      ::ghostpacer::Mat3* rotmatrix);
  ::ghostpacer::Mat3* unsafe_arena_release_rotmatrix();

  // @@protoc_insertion_point(class_scope:ghostpacer.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::Vec3* position_;
  ::ghostpacer::Vec3* rotation_;
  ::ghostpacer::Mat3* rotmatrix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// -------------------------------------------------------------------

class PVRTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.PVRTitle) */ {
 public:
  inline PVRTitle() : PVRTitle(nullptr) {}
  virtual ~PVRTitle();

  PVRTitle(const PVRTitle& from);
  PVRTitle(PVRTitle&& from) noexcept
    : PVRTitle() {
    *this = ::std::move(from);
  }

  inline PVRTitle& operator=(const PVRTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PVRTitle& operator=(PVRTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PVRTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVRTitle* internal_default_instance() {
    return reinterpret_cast<const PVRTitle*>(
               &_PVRTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PVRTitle& a, PVRTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(PVRTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PVRTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PVRTitle* New() const final {
    return CreateMaybeMessage<PVRTitle>(nullptr);
  }

  PVRTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PVRTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PVRTitle& from);
  void MergeFrom(const PVRTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVRTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.PVRTitle";
  }
  protected:
  explicit PVRTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLine1FieldNumber = 1,
    kLine2FieldNumber = 2,
  };
  // string line1 = 1;
  void clear_line1();
  const std::string& line1() const;
  void set_line1(const std::string& value);
  void set_line1(std::string&& value);
  void set_line1(const char* value);
  void set_line1(const char* value, size_t size);
  std::string* mutable_line1();
  std::string* release_line1();
  void set_allocated_line1(std::string* line1);
  private:
  const std::string& _internal_line1() const;
  void _internal_set_line1(const std::string& value);
  std::string* _internal_mutable_line1();
  public:

  // string line2 = 2;
  void clear_line2();
  const std::string& line2() const;
  void set_line2(const std::string& value);
  void set_line2(std::string&& value);
  void set_line2(const char* value);
  void set_line2(const char* value, size_t size);
  std::string* mutable_line2();
  std::string* release_line2();
  void set_allocated_line2(std::string* line2);
  private:
  const std::string& _internal_line2() const;
  void _internal_set_line2(const std::string& value);
  std::string* _internal_mutable_line2();
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.PVRTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 1,
    kPvrTitleFieldNumber = 2,
    kCameraFieldNumber = 3,
  };
  // .ghostpacer.Avatar avatar = 1;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::ghostpacer::Avatar& avatar() const;
  ::ghostpacer::Avatar* release_avatar();
  ::ghostpacer::Avatar* mutable_avatar();
  void set_allocated_avatar(::ghostpacer::Avatar* avatar);
  private:
  const ::ghostpacer::Avatar& _internal_avatar() const;
  ::ghostpacer::Avatar* _internal_mutable_avatar();
  public:
  void unsafe_arena_set_allocated_avatar(
      ::ghostpacer::Avatar* avatar);
  ::ghostpacer::Avatar* unsafe_arena_release_avatar();

  // .ghostpacer.PVRTitle pvrTitle = 2;
  bool has_pvrtitle() const;
  private:
  bool _internal_has_pvrtitle() const;
  public:
  void clear_pvrtitle();
  const ::ghostpacer::PVRTitle& pvrtitle() const;
  ::ghostpacer::PVRTitle* release_pvrtitle();
  ::ghostpacer::PVRTitle* mutable_pvrtitle();
  void set_allocated_pvrtitle(::ghostpacer::PVRTitle* pvrtitle);
  private:
  const ::ghostpacer::PVRTitle& _internal_pvrtitle() const;
  ::ghostpacer::PVRTitle* _internal_mutable_pvrtitle();
  public:
  void unsafe_arena_set_allocated_pvrtitle(
      ::ghostpacer::PVRTitle* pvrtitle);
  ::ghostpacer::PVRTitle* unsafe_arena_release_pvrtitle();

  // .ghostpacer.Camera camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::ghostpacer::Camera& camera() const;
  ::ghostpacer::Camera* release_camera();
  ::ghostpacer::Camera* mutable_camera();
  void set_allocated_camera(::ghostpacer::Camera* camera);
  private:
  const ::ghostpacer::Camera& _internal_camera() const;
  ::ghostpacer::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::ghostpacer::Camera* camera);
  ::ghostpacer::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:ghostpacer.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::Avatar* avatar_;
  ::ghostpacer::PVRTitle* pvrtitle_;
  ::ghostpacer::Camera* camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// -------------------------------------------------------------------

class Mat3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.Mat3) */ {
 public:
  inline Mat3() : Mat3(nullptr) {}
  virtual ~Mat3();

  Mat3(const Mat3& from);
  Mat3(Mat3&& from) noexcept
    : Mat3() {
    *this = ::std::move(from);
  }

  inline Mat3& operator=(const Mat3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mat3& operator=(Mat3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mat3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3* internal_default_instance() {
    return reinterpret_cast<const Mat3*>(
               &_Mat3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Mat3& a, Mat3& b) {
    a.Swap(&b);
  }
  inline void Swap(Mat3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mat3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mat3* New() const final {
    return CreateMaybeMessage<Mat3>(nullptr);
  }

  Mat3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mat3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mat3& from);
  void MergeFrom(const Mat3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.Mat3";
  }
  protected:
  explicit Mat3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame0v1_2eproto);
    return ::descriptor_table_frame0v1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRow1FieldNumber = 1,
    kRow2FieldNumber = 2,
    kRow3FieldNumber = 3,
  };
  // .ghostpacer.Vec3 row1 = 1;
  bool has_row1() const;
  private:
  bool _internal_has_row1() const;
  public:
  void clear_row1();
  const ::ghostpacer::Vec3& row1() const;
  ::ghostpacer::Vec3* release_row1();
  ::ghostpacer::Vec3* mutable_row1();
  void set_allocated_row1(::ghostpacer::Vec3* row1);
  private:
  const ::ghostpacer::Vec3& _internal_row1() const;
  ::ghostpacer::Vec3* _internal_mutable_row1();
  public:
  void unsafe_arena_set_allocated_row1(
      ::ghostpacer::Vec3* row1);
  ::ghostpacer::Vec3* unsafe_arena_release_row1();

  // .ghostpacer.Vec3 row2 = 2;
  bool has_row2() const;
  private:
  bool _internal_has_row2() const;
  public:
  void clear_row2();
  const ::ghostpacer::Vec3& row2() const;
  ::ghostpacer::Vec3* release_row2();
  ::ghostpacer::Vec3* mutable_row2();
  void set_allocated_row2(::ghostpacer::Vec3* row2);
  private:
  const ::ghostpacer::Vec3& _internal_row2() const;
  ::ghostpacer::Vec3* _internal_mutable_row2();
  public:
  void unsafe_arena_set_allocated_row2(
      ::ghostpacer::Vec3* row2);
  ::ghostpacer::Vec3* unsafe_arena_release_row2();

  // .ghostpacer.Vec3 row3 = 3;
  bool has_row3() const;
  private:
  bool _internal_has_row3() const;
  public:
  void clear_row3();
  const ::ghostpacer::Vec3& row3() const;
  ::ghostpacer::Vec3* release_row3();
  ::ghostpacer::Vec3* mutable_row3();
  void set_allocated_row3(::ghostpacer::Vec3* row3);
  private:
  const ::ghostpacer::Vec3& _internal_row3() const;
  ::ghostpacer::Vec3* _internal_mutable_row3();
  public:
  void unsafe_arena_set_allocated_row3(
      ::ghostpacer::Vec3* row3);
  ::ghostpacer::Vec3* unsafe_arena_release_row3();

  // @@protoc_insertion_point(class_scope:ghostpacer.Mat3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::Vec3* row1_;
  ::ghostpacer::Vec3* row2_;
  ::ghostpacer::Vec3* row3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame0v1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// double x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline double Vec3::_internal_x() const {
  return x_;
}
inline double Vec3::x() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Vec3.x)
  return _internal_x();
}
inline void Vec3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vec3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ghostpacer.Vec3.x)
}

// double y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline double Vec3::_internal_y() const {
  return y_;
}
inline double Vec3::y() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Vec3.y)
  return _internal_y();
}
inline void Vec3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vec3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ghostpacer.Vec3.y)
}

// double z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline double Vec3::_internal_z() const {
  return z_;
}
inline double Vec3::z() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Vec3.z)
  return _internal_z();
}
inline void Vec3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vec3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ghostpacer.Vec3.z)
}

// -------------------------------------------------------------------

// Avatar

// .ghostpacer.Vec3 position = 1;
inline bool Avatar::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Avatar::has_position() const {
  return _internal_has_position();
}
inline void Avatar::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ghostpacer::Vec3& Avatar::_internal_position() const {
  const ::ghostpacer::Vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Avatar::position() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Avatar.position)
  return _internal_position();
}
inline void Avatar::unsafe_arena_set_allocated_position(
    ::ghostpacer::Vec3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Avatar.position)
}
inline ::ghostpacer::Vec3* Avatar::release_position() {
  
  ::ghostpacer::Vec3* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Avatar::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ghostpacer.Avatar.position)
  
  ::ghostpacer::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Avatar::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::ghostpacer::Vec3* Avatar::mutable_position() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Avatar.position)
  return _internal_mutable_position();
}
inline void Avatar::set_allocated_position(::ghostpacer::Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Avatar.position)
}

// .ghostpacer.Vec3 rotation = 2;
inline bool Avatar::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Avatar::has_rotation() const {
  return _internal_has_rotation();
}
inline void Avatar::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::ghostpacer::Vec3& Avatar::_internal_rotation() const {
  const ::ghostpacer::Vec3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Avatar::rotation() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Avatar.rotation)
  return _internal_rotation();
}
inline void Avatar::unsafe_arena_set_allocated_rotation(
    ::ghostpacer::Vec3* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Avatar.rotation)
}
inline ::ghostpacer::Vec3* Avatar::release_rotation() {
  
  ::ghostpacer::Vec3* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Avatar::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ghostpacer.Avatar.rotation)
  
  ::ghostpacer::Vec3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Avatar::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::ghostpacer::Vec3* Avatar::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Avatar.rotation)
  return _internal_mutable_rotation();
}
inline void Avatar::set_allocated_rotation(::ghostpacer::Vec3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Avatar.rotation)
}

// double phase = 3;
inline void Avatar::clear_phase() {
  phase_ = 0;
}
inline double Avatar::_internal_phase() const {
  return phase_;
}
inline double Avatar::phase() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Avatar.phase)
  return _internal_phase();
}
inline void Avatar::_internal_set_phase(double value) {
  
  phase_ = value;
}
inline void Avatar::set_phase(double value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:ghostpacer.Avatar.phase)
}

// -------------------------------------------------------------------

// Camera

// .ghostpacer.Vec3 position = 1;
inline bool Camera::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Camera::has_position() const {
  return _internal_has_position();
}
inline void Camera::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ghostpacer::Vec3& Camera::_internal_position() const {
  const ::ghostpacer::Vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Camera::position() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Camera.position)
  return _internal_position();
}
inline void Camera::unsafe_arena_set_allocated_position(
    ::ghostpacer::Vec3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Camera.position)
}
inline ::ghostpacer::Vec3* Camera::release_position() {
  
  ::ghostpacer::Vec3* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Camera::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ghostpacer.Camera.position)
  
  ::ghostpacer::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Camera::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::ghostpacer::Vec3* Camera::mutable_position() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Camera.position)
  return _internal_mutable_position();
}
inline void Camera::set_allocated_position(::ghostpacer::Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Camera.position)
}

// .ghostpacer.Vec3 rotation = 2;
inline bool Camera::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Camera::has_rotation() const {
  return _internal_has_rotation();
}
inline void Camera::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::ghostpacer::Vec3& Camera::_internal_rotation() const {
  const ::ghostpacer::Vec3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Camera::rotation() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Camera.rotation)
  return _internal_rotation();
}
inline void Camera::unsafe_arena_set_allocated_rotation(
    ::ghostpacer::Vec3* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Camera.rotation)
}
inline ::ghostpacer::Vec3* Camera::release_rotation() {
  
  ::ghostpacer::Vec3* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Camera::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ghostpacer.Camera.rotation)
  
  ::ghostpacer::Vec3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Camera::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::ghostpacer::Vec3* Camera::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Camera.rotation)
  return _internal_mutable_rotation();
}
inline void Camera::set_allocated_rotation(::ghostpacer::Vec3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Camera.rotation)
}

// .ghostpacer.Mat3 rotMatrix = 3;
inline bool Camera::_internal_has_rotmatrix() const {
  return this != internal_default_instance() && rotmatrix_ != nullptr;
}
inline bool Camera::has_rotmatrix() const {
  return _internal_has_rotmatrix();
}
inline void Camera::clear_rotmatrix() {
  if (GetArena() == nullptr && rotmatrix_ != nullptr) {
    delete rotmatrix_;
  }
  rotmatrix_ = nullptr;
}
inline const ::ghostpacer::Mat3& Camera::_internal_rotmatrix() const {
  const ::ghostpacer::Mat3* p = rotmatrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Mat3*>(
      &::ghostpacer::_Mat3_default_instance_);
}
inline const ::ghostpacer::Mat3& Camera::rotmatrix() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Camera.rotMatrix)
  return _internal_rotmatrix();
}
inline void Camera::unsafe_arena_set_allocated_rotmatrix(
    ::ghostpacer::Mat3* rotmatrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotmatrix_);
  }
  rotmatrix_ = rotmatrix;
  if (rotmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Camera.rotMatrix)
}
inline ::ghostpacer::Mat3* Camera::release_rotmatrix() {
  
  ::ghostpacer::Mat3* temp = rotmatrix_;
  rotmatrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Mat3* Camera::unsafe_arena_release_rotmatrix() {
  // @@protoc_insertion_point(field_release:ghostpacer.Camera.rotMatrix)
  
  ::ghostpacer::Mat3* temp = rotmatrix_;
  rotmatrix_ = nullptr;
  return temp;
}
inline ::ghostpacer::Mat3* Camera::_internal_mutable_rotmatrix() {
  
  if (rotmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Mat3>(GetArena());
    rotmatrix_ = p;
  }
  return rotmatrix_;
}
inline ::ghostpacer::Mat3* Camera::mutable_rotmatrix() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Camera.rotMatrix)
  return _internal_mutable_rotmatrix();
}
inline void Camera::set_allocated_rotmatrix(::ghostpacer::Mat3* rotmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotmatrix_;
  }
  if (rotmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotmatrix);
    if (message_arena != submessage_arena) {
      rotmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotmatrix, submessage_arena);
    }
    
  } else {
    
  }
  rotmatrix_ = rotmatrix;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Camera.rotMatrix)
}

// -------------------------------------------------------------------

// PVRTitle

// string line1 = 1;
inline void PVRTitle::clear_line1() {
  line1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PVRTitle::line1() const {
  // @@protoc_insertion_point(field_get:ghostpacer.PVRTitle.line1)
  return _internal_line1();
}
inline void PVRTitle::set_line1(const std::string& value) {
  _internal_set_line1(value);
  // @@protoc_insertion_point(field_set:ghostpacer.PVRTitle.line1)
}
inline std::string* PVRTitle::mutable_line1() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.PVRTitle.line1)
  return _internal_mutable_line1();
}
inline const std::string& PVRTitle::_internal_line1() const {
  return line1_.Get();
}
inline void PVRTitle::_internal_set_line1(const std::string& value) {
  
  line1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PVRTitle::set_line1(std::string&& value) {
  
  line1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ghostpacer.PVRTitle.line1)
}
inline void PVRTitle::set_line1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ghostpacer.PVRTitle.line1)
}
inline void PVRTitle::set_line1(const char* value,
    size_t size) {
  
  line1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.PVRTitle.line1)
}
inline std::string* PVRTitle::_internal_mutable_line1() {
  
  return line1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PVRTitle::release_line1() {
  // @@protoc_insertion_point(field_release:ghostpacer.PVRTitle.line1)
  return line1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PVRTitle::set_allocated_line1(std::string* line1) {
  if (line1 != nullptr) {
    
  } else {
    
  }
  line1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.PVRTitle.line1)
}

// string line2 = 2;
inline void PVRTitle::clear_line2() {
  line2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PVRTitle::line2() const {
  // @@protoc_insertion_point(field_get:ghostpacer.PVRTitle.line2)
  return _internal_line2();
}
inline void PVRTitle::set_line2(const std::string& value) {
  _internal_set_line2(value);
  // @@protoc_insertion_point(field_set:ghostpacer.PVRTitle.line2)
}
inline std::string* PVRTitle::mutable_line2() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.PVRTitle.line2)
  return _internal_mutable_line2();
}
inline const std::string& PVRTitle::_internal_line2() const {
  return line2_.Get();
}
inline void PVRTitle::_internal_set_line2(const std::string& value) {
  
  line2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PVRTitle::set_line2(std::string&& value) {
  
  line2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ghostpacer.PVRTitle.line2)
}
inline void PVRTitle::set_line2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ghostpacer.PVRTitle.line2)
}
inline void PVRTitle::set_line2(const char* value,
    size_t size) {
  
  line2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.PVRTitle.line2)
}
inline std::string* PVRTitle::_internal_mutable_line2() {
  
  return line2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PVRTitle::release_line2() {
  // @@protoc_insertion_point(field_release:ghostpacer.PVRTitle.line2)
  return line2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PVRTitle::set_allocated_line2(std::string* line2) {
  if (line2 != nullptr) {
    
  } else {
    
  }
  line2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.PVRTitle.line2)
}

// -------------------------------------------------------------------

// Frame

// .ghostpacer.Avatar avatar = 1;
inline bool Frame::_internal_has_avatar() const {
  return this != internal_default_instance() && avatar_ != nullptr;
}
inline bool Frame::has_avatar() const {
  return _internal_has_avatar();
}
inline void Frame::clear_avatar() {
  if (GetArena() == nullptr && avatar_ != nullptr) {
    delete avatar_;
  }
  avatar_ = nullptr;
}
inline const ::ghostpacer::Avatar& Frame::_internal_avatar() const {
  const ::ghostpacer::Avatar* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Avatar*>(
      &::ghostpacer::_Avatar_default_instance_);
}
inline const ::ghostpacer::Avatar& Frame::avatar() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Frame.avatar)
  return _internal_avatar();
}
inline void Frame::unsafe_arena_set_allocated_avatar(
    ::ghostpacer::Avatar* avatar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_);
  }
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Frame.avatar)
}
inline ::ghostpacer::Avatar* Frame::release_avatar() {
  
  ::ghostpacer::Avatar* temp = avatar_;
  avatar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Avatar* Frame::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_release:ghostpacer.Frame.avatar)
  
  ::ghostpacer::Avatar* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::ghostpacer::Avatar* Frame::_internal_mutable_avatar() {
  
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Avatar>(GetArena());
    avatar_ = p;
  }
  return avatar_;
}
inline ::ghostpacer::Avatar* Frame::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Frame.avatar)
  return _internal_mutable_avatar();
}
inline void Frame::set_allocated_avatar(::ghostpacer::Avatar* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avatar);
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    
  } else {
    
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Frame.avatar)
}

// .ghostpacer.PVRTitle pvrTitle = 2;
inline bool Frame::_internal_has_pvrtitle() const {
  return this != internal_default_instance() && pvrtitle_ != nullptr;
}
inline bool Frame::has_pvrtitle() const {
  return _internal_has_pvrtitle();
}
inline void Frame::clear_pvrtitle() {
  if (GetArena() == nullptr && pvrtitle_ != nullptr) {
    delete pvrtitle_;
  }
  pvrtitle_ = nullptr;
}
inline const ::ghostpacer::PVRTitle& Frame::_internal_pvrtitle() const {
  const ::ghostpacer::PVRTitle* p = pvrtitle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::PVRTitle*>(
      &::ghostpacer::_PVRTitle_default_instance_);
}
inline const ::ghostpacer::PVRTitle& Frame::pvrtitle() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Frame.pvrTitle)
  return _internal_pvrtitle();
}
inline void Frame::unsafe_arena_set_allocated_pvrtitle(
    ::ghostpacer::PVRTitle* pvrtitle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvrtitle_);
  }
  pvrtitle_ = pvrtitle;
  if (pvrtitle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Frame.pvrTitle)
}
inline ::ghostpacer::PVRTitle* Frame::release_pvrtitle() {
  
  ::ghostpacer::PVRTitle* temp = pvrtitle_;
  pvrtitle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::PVRTitle* Frame::unsafe_arena_release_pvrtitle() {
  // @@protoc_insertion_point(field_release:ghostpacer.Frame.pvrTitle)
  
  ::ghostpacer::PVRTitle* temp = pvrtitle_;
  pvrtitle_ = nullptr;
  return temp;
}
inline ::ghostpacer::PVRTitle* Frame::_internal_mutable_pvrtitle() {
  
  if (pvrtitle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::PVRTitle>(GetArena());
    pvrtitle_ = p;
  }
  return pvrtitle_;
}
inline ::ghostpacer::PVRTitle* Frame::mutable_pvrtitle() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Frame.pvrTitle)
  return _internal_mutable_pvrtitle();
}
inline void Frame::set_allocated_pvrtitle(::ghostpacer::PVRTitle* pvrtitle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pvrtitle_;
  }
  if (pvrtitle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pvrtitle);
    if (message_arena != submessage_arena) {
      pvrtitle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvrtitle, submessage_arena);
    }
    
  } else {
    
  }
  pvrtitle_ = pvrtitle;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Frame.pvrTitle)
}

// .ghostpacer.Camera camera = 3;
inline bool Frame::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool Frame::has_camera() const {
  return _internal_has_camera();
}
inline void Frame::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::ghostpacer::Camera& Frame::_internal_camera() const {
  const ::ghostpacer::Camera* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Camera*>(
      &::ghostpacer::_Camera_default_instance_);
}
inline const ::ghostpacer::Camera& Frame::camera() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Frame.camera)
  return _internal_camera();
}
inline void Frame::unsafe_arena_set_allocated_camera(
    ::ghostpacer::Camera* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Frame.camera)
}
inline ::ghostpacer::Camera* Frame::release_camera() {
  
  ::ghostpacer::Camera* temp = camera_;
  camera_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Camera* Frame::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:ghostpacer.Frame.camera)
  
  ::ghostpacer::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::ghostpacer::Camera* Frame::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Camera>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::ghostpacer::Camera* Frame::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Frame.camera)
  return _internal_mutable_camera();
}
inline void Frame::set_allocated_camera(::ghostpacer::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Frame.camera)
}

// -------------------------------------------------------------------

// Mat3

// .ghostpacer.Vec3 row1 = 1;
inline bool Mat3::_internal_has_row1() const {
  return this != internal_default_instance() && row1_ != nullptr;
}
inline bool Mat3::has_row1() const {
  return _internal_has_row1();
}
inline void Mat3::clear_row1() {
  if (GetArena() == nullptr && row1_ != nullptr) {
    delete row1_;
  }
  row1_ = nullptr;
}
inline const ::ghostpacer::Vec3& Mat3::_internal_row1() const {
  const ::ghostpacer::Vec3* p = row1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Mat3::row1() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Mat3.row1)
  return _internal_row1();
}
inline void Mat3::unsafe_arena_set_allocated_row1(
    ::ghostpacer::Vec3* row1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row1_);
  }
  row1_ = row1;
  if (row1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Mat3.row1)
}
inline ::ghostpacer::Vec3* Mat3::release_row1() {
  
  ::ghostpacer::Vec3* temp = row1_;
  row1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::unsafe_arena_release_row1() {
  // @@protoc_insertion_point(field_release:ghostpacer.Mat3.row1)
  
  ::ghostpacer::Vec3* temp = row1_;
  row1_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::_internal_mutable_row1() {
  
  if (row1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    row1_ = p;
  }
  return row1_;
}
inline ::ghostpacer::Vec3* Mat3::mutable_row1() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Mat3.row1)
  return _internal_mutable_row1();
}
inline void Mat3::set_allocated_row1(::ghostpacer::Vec3* row1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row1_;
  }
  if (row1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row1);
    if (message_arena != submessage_arena) {
      row1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row1, submessage_arena);
    }
    
  } else {
    
  }
  row1_ = row1;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Mat3.row1)
}

// .ghostpacer.Vec3 row2 = 2;
inline bool Mat3::_internal_has_row2() const {
  return this != internal_default_instance() && row2_ != nullptr;
}
inline bool Mat3::has_row2() const {
  return _internal_has_row2();
}
inline void Mat3::clear_row2() {
  if (GetArena() == nullptr && row2_ != nullptr) {
    delete row2_;
  }
  row2_ = nullptr;
}
inline const ::ghostpacer::Vec3& Mat3::_internal_row2() const {
  const ::ghostpacer::Vec3* p = row2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Mat3::row2() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Mat3.row2)
  return _internal_row2();
}
inline void Mat3::unsafe_arena_set_allocated_row2(
    ::ghostpacer::Vec3* row2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row2_);
  }
  row2_ = row2;
  if (row2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Mat3.row2)
}
inline ::ghostpacer::Vec3* Mat3::release_row2() {
  
  ::ghostpacer::Vec3* temp = row2_;
  row2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::unsafe_arena_release_row2() {
  // @@protoc_insertion_point(field_release:ghostpacer.Mat3.row2)
  
  ::ghostpacer::Vec3* temp = row2_;
  row2_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::_internal_mutable_row2() {
  
  if (row2_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    row2_ = p;
  }
  return row2_;
}
inline ::ghostpacer::Vec3* Mat3::mutable_row2() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Mat3.row2)
  return _internal_mutable_row2();
}
inline void Mat3::set_allocated_row2(::ghostpacer::Vec3* row2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row2_;
  }
  if (row2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row2);
    if (message_arena != submessage_arena) {
      row2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row2, submessage_arena);
    }
    
  } else {
    
  }
  row2_ = row2;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Mat3.row2)
}

// .ghostpacer.Vec3 row3 = 3;
inline bool Mat3::_internal_has_row3() const {
  return this != internal_default_instance() && row3_ != nullptr;
}
inline bool Mat3::has_row3() const {
  return _internal_has_row3();
}
inline void Mat3::clear_row3() {
  if (GetArena() == nullptr && row3_ != nullptr) {
    delete row3_;
  }
  row3_ = nullptr;
}
inline const ::ghostpacer::Vec3& Mat3::_internal_row3() const {
  const ::ghostpacer::Vec3* p = row3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::Vec3*>(
      &::ghostpacer::_Vec3_default_instance_);
}
inline const ::ghostpacer::Vec3& Mat3::row3() const {
  // @@protoc_insertion_point(field_get:ghostpacer.Mat3.row3)
  return _internal_row3();
}
inline void Mat3::unsafe_arena_set_allocated_row3(
    ::ghostpacer::Vec3* row3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row3_);
  }
  row3_ = row3;
  if (row3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.Mat3.row3)
}
inline ::ghostpacer::Vec3* Mat3::release_row3() {
  
  ::ghostpacer::Vec3* temp = row3_;
  row3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::unsafe_arena_release_row3() {
  // @@protoc_insertion_point(field_release:ghostpacer.Mat3.row3)
  
  ::ghostpacer::Vec3* temp = row3_;
  row3_ = nullptr;
  return temp;
}
inline ::ghostpacer::Vec3* Mat3::_internal_mutable_row3() {
  
  if (row3_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::Vec3>(GetArena());
    row3_ = p;
  }
  return row3_;
}
inline ::ghostpacer::Vec3* Mat3::mutable_row3() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.Mat3.row3)
  return _internal_mutable_row3();
}
inline void Mat3::set_allocated_row3(::ghostpacer::Vec3* row3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row3_;
  }
  if (row3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row3);
    if (message_arena != submessage_arena) {
      row3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row3, submessage_arena);
    }
    
  } else {
    
  }
  row3_ = row3;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.Mat3.row3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ghostpacer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frame0v1_2eproto
