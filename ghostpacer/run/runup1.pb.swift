// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: runup1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ghostpacer_Run_TimedPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float = 0

  var y: Float = 0

  var time: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ghostpacer_Run_UploadedRun {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startTime: Float = 0

  var startLat: Float = 0

  var startLon: Float = 0

  var timedPoints: [Ghostpacer_Run_TimedPoint] = []

  var setRunSplit: Float = 0

  var userDist: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ghostpacer.run"

extension Ghostpacer_Run_TimedPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimedPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularFloatField(value: self.time, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ghostpacer_Run_TimedPoint, rhs: Ghostpacer_Run_TimedPoint) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ghostpacer_Run_UploadedRun: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadedRun"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "startTime"),
    3: .same(proto: "startLat"),
    4: .same(proto: "startLon"),
    13: .same(proto: "timedPoints"),
    11: .same(proto: "setRunSplit"),
    12: .same(proto: "userDist"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularFloatField(value: &self.startTime) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.startLat) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.startLon) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.setRunSplit) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.userDist) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.timedPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startTime != 0 {
      try visitor.visitSingularFloatField(value: self.startTime, fieldNumber: 2)
    }
    if self.startLat != 0 {
      try visitor.visitSingularFloatField(value: self.startLat, fieldNumber: 3)
    }
    if self.startLon != 0 {
      try visitor.visitSingularFloatField(value: self.startLon, fieldNumber: 4)
    }
    if self.setRunSplit != 0 {
      try visitor.visitSingularFloatField(value: self.setRunSplit, fieldNumber: 11)
    }
    if self.userDist != 0 {
      try visitor.visitSingularFloatField(value: self.userDist, fieldNumber: 12)
    }
    if !self.timedPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timedPoints, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ghostpacer_Run_UploadedRun, rhs: Ghostpacer_Run_UploadedRun) -> Bool {
    if lhs.startTime != rhs.startTime {return false}
    if lhs.startLat != rhs.startLat {return false}
    if lhs.startLon != rhs.startLon {return false}
    if lhs.timedPoints != rhs.timedPoints {return false}
    if lhs.setRunSplit != rhs.setRunSplit {return false}
    if lhs.userDist != rhs.userDist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
