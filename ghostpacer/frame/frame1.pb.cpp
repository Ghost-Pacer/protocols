// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame1.proto

#include "frame1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_frame1_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Banner;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Legend;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Menu;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vec3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Avatar;
}  // namespace protobuf_frame1_2eproto
namespace ghostpacer {
namespace frame {
class Vec3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec3>
      _instance;
} _Vec3_default_instance_;
class Mat3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mat3>
      _instance;
} _Mat3_default_instance_;
class AvatarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Avatar>
      _instance;
} _Avatar_default_instance_;
class MenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Menu>
      _instance;
} _Menu_default_instance_;
class BannerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Banner>
      _instance;
} _Banner_default_instance_;
class LegendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Legend>
      _instance;
} _Legend_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
}  // namespace frame
}  // namespace ghostpacer
namespace protobuf_frame1_2eproto {
static void InitDefaultsVec3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Vec3_default_instance_;
    new (ptr) ::ghostpacer::frame::Vec3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Vec3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec3}, {}};

static void InitDefaultsMat3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Mat3_default_instance_;
    new (ptr) ::ghostpacer::frame::Mat3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Mat3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mat3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMat3}, {
      &protobuf_frame1_2eproto::scc_info_Vec3.base,}};

static void InitDefaultsAvatar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Avatar_default_instance_;
    new (ptr) ::ghostpacer::frame::Avatar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Avatar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Avatar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAvatar}, {
      &protobuf_frame1_2eproto::scc_info_Vec3.base,}};

static void InitDefaultsMenu() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Menu_default_instance_;
    new (ptr) ::ghostpacer::frame::Menu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Menu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Menu =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMenu}, {}};

static void InitDefaultsBanner() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Banner_default_instance_;
    new (ptr) ::ghostpacer::frame::Banner();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Banner::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Banner =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBanner}, {}};

static void InitDefaultsLegend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Legend_default_instance_;
    new (ptr) ::ghostpacer::frame::Legend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Legend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Legend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLegend}, {}};

static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ghostpacer::frame::_Frame_default_instance_;
    new (ptr) ::ghostpacer::frame::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ghostpacer::frame::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFrame}, {
      &protobuf_frame1_2eproto::scc_info_Avatar.base,
      &protobuf_frame1_2eproto::scc_info_Legend.base,
      &protobuf_frame1_2eproto::scc_info_Menu.base,
      &protobuf_frame1_2eproto::scc_info_Banner.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vec3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mat3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Avatar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Menu.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Banner.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Legend.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Vec3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Vec3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Vec3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Mat3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Mat3, row1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Mat3, row2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Mat3, row3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, avatarposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, avatartovec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, avatarupvec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, animationphase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, cameraposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, cameratovec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Avatar, cameraupvec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Menu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Menu, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Menu, activeentryindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Banner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Banner, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Banner, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Legend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Legend, upactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Legend, selectactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Legend, downactive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Frame, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Frame, legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Frame, menu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ghostpacer::frame::Frame, banner_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ghostpacer::frame::Vec3)},
  { 8, -1, sizeof(::ghostpacer::frame::Mat3)},
  { 16, -1, sizeof(::ghostpacer::frame::Avatar)},
  { 28, -1, sizeof(::ghostpacer::frame::Menu)},
  { 35, -1, sizeof(::ghostpacer::frame::Banner)},
  { 42, -1, sizeof(::ghostpacer::frame::Legend)},
  { 50, -1, sizeof(::ghostpacer::frame::Frame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Mat3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Avatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Menu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Banner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Legend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ghostpacer::frame::_Frame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "frame1.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014frame1.proto\022\020ghostpacer.frame\"\'\n\004Vec3"
      "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"x\n\004Mat"
      "3\022$\n\004row1\030\001 \001(\0132\026.ghostpacer.frame.Vec3\022"
      "$\n\004row2\030\002 \001(\0132\026.ghostpacer.frame.Vec3\022$\n"
      "\004row3\030\003 \001(\0132\026.ghostpacer.frame.Vec3\"\300\002\n\006"
      "Avatar\022.\n\016avatarPosition\030\001 \001(\0132\026.ghostpa"
      "cer.frame.Vec3\022+\n\013avatarToVec\030\006 \001(\0132\026.gh"
      "ostpacer.frame.Vec3\022+\n\013avatarUpVec\030\007 \001(\013"
      "2\026.ghostpacer.frame.Vec3\022\026\n\016animationPha"
      "se\030\003 \001(\001\022.\n\016cameraPosition\030\004 \001(\0132\026.ghost"
      "pacer.frame.Vec3\022+\n\013cameraToVec\030\010 \001(\0132\026."
      "ghostpacer.frame.Vec3\022+\n\013cameraUpVec\030\t \001"
      "(\0132\026.ghostpacer.frame.Vec3J\004\010\002\020\003J\004\010\005\020\006\"1"
      "\n\004Menu\022\017\n\007entries\030\001 \003(\t\022\030\n\020activeEntryIn"
      "dex\030\002 \001(\r\"m\n\006Banner\022\r\n\005lines\030\001 \003(\t\0223\n\010po"
      "sition\030\002 \001(\0162!.ghostpacer.frame.Banner.P"
      "osition\"\037\n\010Position\022\007\n\003TOP\020\000\022\n\n\006CENTER\020\001"
      "\"D\n\006Legend\022\020\n\010upActive\030\001 \001(\010\022\024\n\014selectAc"
      "tive\030\002 \001(\010\022\022\n\ndownActive\030\003 \001(\010\"\253\001\n\005Frame"
      "\022(\n\006avatar\030\001 \001(\0132\030.ghostpacer.frame.Avat"
      "ar\022(\n\006legend\030\002 \001(\0132\030.ghostpacer.frame.Le"
      "gend\022$\n\004menu\030\003 \001(\0132\026.ghostpacer.frame.Me"
      "nu\022(\n\006banner\030\004 \001(\0132\030.ghostpacer.frame.Ba"
      "nnerBAZ\?github.com/Ghost-Pacer/protocols"
      "/ghostpacer/frame/go/frameprotob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame1.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_frame1_2eproto
namespace ghostpacer {
namespace frame {
const ::google::protobuf::EnumDescriptor* Banner_Position_descriptor() {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frame1_2eproto::file_level_enum_descriptors[0];
}
bool Banner_Position_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Banner_Position Banner::TOP;
const Banner_Position Banner::CENTER;
const Banner_Position Banner::Position_MIN;
const Banner_Position Banner::Position_MAX;
const int Banner::Position_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Vec3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec3& Vec3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Vec3.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Vec3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Vec3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mat3::InitAsDefaultInstance() {
  ::ghostpacer::frame::_Mat3_default_instance_._instance.get_mutable()->row1_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Mat3_default_instance_._instance.get_mutable()->row2_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Mat3_default_instance_._instance.get_mutable()->row3_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mat3::kRow1FieldNumber;
const int Mat3::kRow2FieldNumber;
const int Mat3::kRow3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mat3::Mat3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Mat3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Mat3)
}
Mat3::Mat3(const Mat3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_row1()) {
    row1_ = new ::ghostpacer::frame::Vec3(*from.row1_);
  } else {
    row1_ = NULL;
  }
  if (from.has_row2()) {
    row2_ = new ::ghostpacer::frame::Vec3(*from.row2_);
  } else {
    row2_ = NULL;
  }
  if (from.has_row3()) {
    row3_ = new ::ghostpacer::frame::Vec3(*from.row3_);
  } else {
    row3_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Mat3)
}

void Mat3::SharedCtor() {
  ::memset(&row1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row3_) -
      reinterpret_cast<char*>(&row1_)) + sizeof(row3_));
}

Mat3::~Mat3() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Mat3)
  SharedDtor();
}

void Mat3::SharedDtor() {
  if (this != internal_default_instance()) delete row1_;
  if (this != internal_default_instance()) delete row2_;
  if (this != internal_default_instance()) delete row3_;
}

void Mat3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mat3::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mat3& Mat3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Mat3.base);
  return *internal_default_instance();
}


void Mat3::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && row1_ != NULL) {
    delete row1_;
  }
  row1_ = NULL;
  if (GetArenaNoVirtual() == NULL && row2_ != NULL) {
    delete row2_;
  }
  row2_ = NULL;
  if (GetArenaNoVirtual() == NULL && row3_ != NULL) {
    delete row3_;
  }
  row3_ = NULL;
  _internal_metadata_.Clear();
}

bool Mat3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Mat3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ghostpacer.frame.Vec3 row1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 row2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 row3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Mat3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Mat3)
  return false;
#undef DO_
}

void Mat3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Vec3 row1 = 1;
  if (this->has_row1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_row1(), output);
  }

  // .ghostpacer.frame.Vec3 row2 = 2;
  if (this->has_row2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_row2(), output);
  }

  // .ghostpacer.frame.Vec3 row3 = 3;
  if (this->has_row3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_row3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Mat3)
}

::google::protobuf::uint8* Mat3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Vec3 row1 = 1;
  if (this->has_row1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_row1(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 row2 = 2;
  if (this->has_row2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_row2(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 row3 = 3;
  if (this->has_row3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_row3(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Mat3)
  return target;
}

size_t Mat3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Mat3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ghostpacer.frame.Vec3 row1 = 1;
  if (this->has_row1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row1_);
  }

  // .ghostpacer.frame.Vec3 row2 = 2;
  if (this->has_row2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row2_);
  }

  // .ghostpacer.frame.Vec3 row3 = 3;
  if (this->has_row3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *row3_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mat3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  const Mat3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mat3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Mat3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Mat3)
    MergeFrom(*source);
  }
}

void Mat3::MergeFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_row1()) {
    mutable_row1()->::ghostpacer::frame::Vec3::MergeFrom(from.row1());
  }
  if (from.has_row2()) {
    mutable_row2()->::ghostpacer::frame::Vec3::MergeFrom(from.row2());
  }
  if (from.has_row3()) {
    mutable_row3()->::ghostpacer::frame::Vec3::MergeFrom(from.row3());
  }
}

void Mat3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat3::CopyFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat3::IsInitialized() const {
  return true;
}

void Mat3::Swap(Mat3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mat3::InternalSwap(Mat3* other) {
  using std::swap;
  swap(row1_, other->row1_);
  swap(row2_, other->row2_);
  swap(row3_, other->row3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mat3::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Avatar::InitAsDefaultInstance() {
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->avatarposition_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->avatartovec_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->avatarupvec_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->cameraposition_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->cameratovec_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
  ::ghostpacer::frame::_Avatar_default_instance_._instance.get_mutable()->cameraupvec_ = const_cast< ::ghostpacer::frame::Vec3*>(
      ::ghostpacer::frame::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Avatar::kAvatarPositionFieldNumber;
const int Avatar::kAvatarToVecFieldNumber;
const int Avatar::kAvatarUpVecFieldNumber;
const int Avatar::kAnimationPhaseFieldNumber;
const int Avatar::kCameraPositionFieldNumber;
const int Avatar::kCameraToVecFieldNumber;
const int Avatar::kCameraUpVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Avatar::Avatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Avatar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Avatar)
}
Avatar::Avatar(const Avatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatarposition()) {
    avatarposition_ = new ::ghostpacer::frame::Vec3(*from.avatarposition_);
  } else {
    avatarposition_ = NULL;
  }
  if (from.has_cameraposition()) {
    cameraposition_ = new ::ghostpacer::frame::Vec3(*from.cameraposition_);
  } else {
    cameraposition_ = NULL;
  }
  if (from.has_avatartovec()) {
    avatartovec_ = new ::ghostpacer::frame::Vec3(*from.avatartovec_);
  } else {
    avatartovec_ = NULL;
  }
  if (from.has_avatarupvec()) {
    avatarupvec_ = new ::ghostpacer::frame::Vec3(*from.avatarupvec_);
  } else {
    avatarupvec_ = NULL;
  }
  if (from.has_cameratovec()) {
    cameratovec_ = new ::ghostpacer::frame::Vec3(*from.cameratovec_);
  } else {
    cameratovec_ = NULL;
  }
  if (from.has_cameraupvec()) {
    cameraupvec_ = new ::ghostpacer::frame::Vec3(*from.cameraupvec_);
  } else {
    cameraupvec_ = NULL;
  }
  animationphase_ = from.animationphase_;
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Avatar)
}

void Avatar::SharedCtor() {
  ::memset(&avatarposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animationphase_) -
      reinterpret_cast<char*>(&avatarposition_)) + sizeof(animationphase_));
}

Avatar::~Avatar() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Avatar)
  SharedDtor();
}

void Avatar::SharedDtor() {
  if (this != internal_default_instance()) delete avatarposition_;
  if (this != internal_default_instance()) delete cameraposition_;
  if (this != internal_default_instance()) delete avatartovec_;
  if (this != internal_default_instance()) delete avatarupvec_;
  if (this != internal_default_instance()) delete cameratovec_;
  if (this != internal_default_instance()) delete cameraupvec_;
}

void Avatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Avatar::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Avatar& Avatar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Avatar.base);
  return *internal_default_instance();
}


void Avatar::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Avatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatarposition_ != NULL) {
    delete avatarposition_;
  }
  avatarposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) {
    delete cameraposition_;
  }
  cameraposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatartovec_ != NULL) {
    delete avatartovec_;
  }
  avatartovec_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatarupvec_ != NULL) {
    delete avatarupvec_;
  }
  avatarupvec_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameratovec_ != NULL) {
    delete cameratovec_;
  }
  cameratovec_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraupvec_ != NULL) {
    delete cameraupvec_;
  }
  cameraupvec_ = NULL;
  animationphase_ = 0;
  _internal_metadata_.Clear();
}

bool Avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Avatar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ghostpacer.frame.Vec3 avatarPosition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatarposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double animationPhase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &animationphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 cameraPosition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 avatarToVec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatartovec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 avatarUpVec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatarupvec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 cameraToVec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameratovec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Vec3 cameraUpVec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraupvec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Avatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Avatar)
  return false;
#undef DO_
}

void Avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Avatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Vec3 avatarPosition = 1;
  if (this->has_avatarposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_avatarposition(), output);
  }

  // double animationPhase = 3;
  if (this->animationphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->animationphase(), output);
  }

  // .ghostpacer.frame.Vec3 cameraPosition = 4;
  if (this->has_cameraposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cameraposition(), output);
  }

  // .ghostpacer.frame.Vec3 avatarToVec = 6;
  if (this->has_avatartovec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_avatartovec(), output);
  }

  // .ghostpacer.frame.Vec3 avatarUpVec = 7;
  if (this->has_avatarupvec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_avatarupvec(), output);
  }

  // .ghostpacer.frame.Vec3 cameraToVec = 8;
  if (this->has_cameratovec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_cameratovec(), output);
  }

  // .ghostpacer.frame.Vec3 cameraUpVec = 9;
  if (this->has_cameraupvec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_cameraupvec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Avatar)
}

::google::protobuf::uint8* Avatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Avatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Vec3 avatarPosition = 1;
  if (this->has_avatarposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_avatarposition(), deterministic, target);
  }

  // double animationPhase = 3;
  if (this->animationphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->animationphase(), target);
  }

  // .ghostpacer.frame.Vec3 cameraPosition = 4;
  if (this->has_cameraposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cameraposition(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 avatarToVec = 6;
  if (this->has_avatartovec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_avatartovec(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 avatarUpVec = 7;
  if (this->has_avatarupvec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_avatarupvec(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 cameraToVec = 8;
  if (this->has_cameratovec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_cameratovec(), deterministic, target);
  }

  // .ghostpacer.frame.Vec3 cameraUpVec = 9;
  if (this->has_cameraupvec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_cameraupvec(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Avatar)
  return target;
}

size_t Avatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Avatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ghostpacer.frame.Vec3 avatarPosition = 1;
  if (this->has_avatarposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatarposition_);
  }

  // .ghostpacer.frame.Vec3 cameraPosition = 4;
  if (this->has_cameraposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cameraposition_);
  }

  // .ghostpacer.frame.Vec3 avatarToVec = 6;
  if (this->has_avatartovec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatartovec_);
  }

  // .ghostpacer.frame.Vec3 avatarUpVec = 7;
  if (this->has_avatarupvec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatarupvec_);
  }

  // .ghostpacer.frame.Vec3 cameraToVec = 8;
  if (this->has_cameratovec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cameratovec_);
  }

  // .ghostpacer.frame.Vec3 cameraUpVec = 9;
  if (this->has_cameraupvec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cameraupvec_);
  }

  // double animationPhase = 3;
  if (this->animationphase() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Avatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Avatar)
  GOOGLE_DCHECK_NE(&from, this);
  const Avatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Avatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Avatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Avatar)
    MergeFrom(*source);
  }
}

void Avatar::MergeFrom(const Avatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Avatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatarposition()) {
    mutable_avatarposition()->::ghostpacer::frame::Vec3::MergeFrom(from.avatarposition());
  }
  if (from.has_cameraposition()) {
    mutable_cameraposition()->::ghostpacer::frame::Vec3::MergeFrom(from.cameraposition());
  }
  if (from.has_avatartovec()) {
    mutable_avatartovec()->::ghostpacer::frame::Vec3::MergeFrom(from.avatartovec());
  }
  if (from.has_avatarupvec()) {
    mutable_avatarupvec()->::ghostpacer::frame::Vec3::MergeFrom(from.avatarupvec());
  }
  if (from.has_cameratovec()) {
    mutable_cameratovec()->::ghostpacer::frame::Vec3::MergeFrom(from.cameratovec());
  }
  if (from.has_cameraupvec()) {
    mutable_cameraupvec()->::ghostpacer::frame::Vec3::MergeFrom(from.cameraupvec());
  }
  if (from.animationphase() != 0) {
    set_animationphase(from.animationphase());
  }
}

void Avatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar::CopyFrom(const Avatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar::IsInitialized() const {
  return true;
}

void Avatar::Swap(Avatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Avatar::InternalSwap(Avatar* other) {
  using std::swap;
  swap(avatarposition_, other->avatarposition_);
  swap(cameraposition_, other->cameraposition_);
  swap(avatartovec_, other->avatartovec_);
  swap(avatarupvec_, other->avatarupvec_);
  swap(cameratovec_, other->cameratovec_);
  swap(cameraupvec_, other->cameraupvec_);
  swap(animationphase_, other->animationphase_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Avatar::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Menu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Menu::kEntriesFieldNumber;
const int Menu::kActiveEntryIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Menu::Menu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Menu.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Menu)
}
Menu::Menu(const Menu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activeentryindex_ = from.activeentryindex_;
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Menu)
}

void Menu::SharedCtor() {
  activeentryindex_ = 0u;
}

Menu::~Menu() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Menu)
  SharedDtor();
}

void Menu::SharedDtor() {
}

void Menu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Menu::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Menu& Menu::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Menu.base);
  return *internal_default_instance();
}


void Menu::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  activeentryindex_ = 0u;
  _internal_metadata_.Clear();
}

bool Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Menu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entries(this->entries_size() - 1).data(),
            static_cast<int>(this->entries(this->entries_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ghostpacer.frame.Menu.entries"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 activeEntryIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeentryindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Menu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Menu)
  return false;
#undef DO_
}

void Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string entries = 1;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entries(i).data(), static_cast<int>(this->entries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.frame.Menu.entries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entries(i), output);
  }

  // uint32 activeEntryIndex = 2;
  if (this->activeentryindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activeentryindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Menu)
}

::google::protobuf::uint8* Menu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string entries = 1;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entries(i).data(), static_cast<int>(this->entries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.frame.Menu.entries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->entries(i), target);
  }

  // uint32 activeEntryIndex = 2;
  if (this->activeentryindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activeentryindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Menu)
  return target;
}

size_t Menu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Menu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string entries = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entries_size());
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  // uint32 activeEntryIndex = 2;
  if (this->activeentryindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activeentryindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Menu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Menu)
  GOOGLE_DCHECK_NE(&from, this);
  const Menu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Menu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Menu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Menu)
    MergeFrom(*source);
  }
}

void Menu::MergeFrom(const Menu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Menu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.activeentryindex() != 0) {
    set_activeentryindex(from.activeentryindex());
  }
}

void Menu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menu::CopyFrom(const Menu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menu::IsInitialized() const {
  return true;
}

void Menu::Swap(Menu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Menu::InternalSwap(Menu* other) {
  using std::swap;
  entries_.InternalSwap(CastToBase(&other->entries_));
  swap(activeentryindex_, other->activeentryindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Menu::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Banner::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Banner::kLinesFieldNumber;
const int Banner::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Banner::Banner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Banner.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Banner)
}
Banner::Banner(const Banner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Banner)
}

void Banner::SharedCtor() {
  position_ = 0;
}

Banner::~Banner() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Banner)
  SharedDtor();
}

void Banner::SharedDtor() {
}

void Banner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Banner::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Banner& Banner::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Banner.base);
  return *internal_default_instance();
}


void Banner::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Banner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  position_ = 0;
  _internal_metadata_.Clear();
}

bool Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Banner)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lines()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lines(this->lines_size() - 1).data(),
            static_cast<int>(this->lines(this->lines_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ghostpacer.frame.Banner.lines"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Banner.Position position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::ghostpacer::frame::Banner_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Banner)
  return false;
#undef DO_
}

void Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Banner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lines = 1;
  for (int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lines(i).data(), static_cast<int>(this->lines(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.frame.Banner.lines");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lines(i), output);
  }

  // .ghostpacer.frame.Banner.Position position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Banner)
}

::google::protobuf::uint8* Banner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Banner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lines = 1;
  for (int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lines(i).data(), static_cast<int>(this->lines(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ghostpacer.frame.Banner.lines");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lines(i), target);
  }

  // .ghostpacer.frame.Banner.Position position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Banner)
  return target;
}

size_t Banner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Banner)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string lines = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lines_size());
  for (int i = 0, n = this->lines_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lines(i));
  }

  // .ghostpacer.frame.Banner.Position position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Banner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Banner)
  GOOGLE_DCHECK_NE(&from, this);
  const Banner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Banner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Banner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Banner)
    MergeFrom(*source);
  }
}

void Banner::MergeFrom(const Banner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Banner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void Banner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Banner::CopyFrom(const Banner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Banner::IsInitialized() const {
  return true;
}

void Banner::Swap(Banner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Banner::InternalSwap(Banner* other) {
  using std::swap;
  lines_.InternalSwap(CastToBase(&other->lines_));
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Banner::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Legend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Legend::kUpActiveFieldNumber;
const int Legend::kSelectActiveFieldNumber;
const int Legend::kDownActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Legend::Legend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Legend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Legend)
}
Legend::Legend(const Legend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upactive_, &from.upactive_,
    static_cast<size_t>(reinterpret_cast<char*>(&downactive_) -
    reinterpret_cast<char*>(&upactive_)) + sizeof(downactive_));
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Legend)
}

void Legend::SharedCtor() {
  ::memset(&upactive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downactive_) -
      reinterpret_cast<char*>(&upactive_)) + sizeof(downactive_));
}

Legend::~Legend() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Legend)
  SharedDtor();
}

void Legend::SharedDtor() {
}

void Legend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Legend::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Legend& Legend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Legend.base);
  return *internal_default_instance();
}


void Legend::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Legend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upactive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downactive_) -
      reinterpret_cast<char*>(&upactive_)) + sizeof(downactive_));
  _internal_metadata_.Clear();
}

bool Legend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Legend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool upActive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool selectActive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool downActive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &downactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Legend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Legend)
  return false;
#undef DO_
}

void Legend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Legend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool upActive = 1;
  if (this->upactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->upactive(), output);
  }

  // bool selectActive = 2;
  if (this->selectactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->selectactive(), output);
  }

  // bool downActive = 3;
  if (this->downactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->downactive(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Legend)
}

::google::protobuf::uint8* Legend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Legend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool upActive = 1;
  if (this->upactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->upactive(), target);
  }

  // bool selectActive = 2;
  if (this->selectactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->selectactive(), target);
  }

  // bool downActive = 3;
  if (this->downactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->downactive(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Legend)
  return target;
}

size_t Legend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Legend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool upActive = 1;
  if (this->upactive() != 0) {
    total_size += 1 + 1;
  }

  // bool selectActive = 2;
  if (this->selectactive() != 0) {
    total_size += 1 + 1;
  }

  // bool downActive = 3;
  if (this->downactive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Legend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Legend)
  GOOGLE_DCHECK_NE(&from, this);
  const Legend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Legend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Legend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Legend)
    MergeFrom(*source);
  }
}

void Legend::MergeFrom(const Legend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Legend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upactive() != 0) {
    set_upactive(from.upactive());
  }
  if (from.selectactive() != 0) {
    set_selectactive(from.selectactive());
  }
  if (from.downactive() != 0) {
    set_downactive(from.downactive());
  }
}

void Legend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Legend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Legend::CopyFrom(const Legend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Legend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Legend::IsInitialized() const {
  return true;
}

void Legend::Swap(Legend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Legend::InternalSwap(Legend* other) {
  using std::swap;
  swap(upactive_, other->upactive_);
  swap(selectactive_, other->selectactive_);
  swap(downactive_, other->downactive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Legend::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::ghostpacer::frame::_Frame_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::ghostpacer::frame::Avatar*>(
      ::ghostpacer::frame::Avatar::internal_default_instance());
  ::ghostpacer::frame::_Frame_default_instance_._instance.get_mutable()->legend_ = const_cast< ::ghostpacer::frame::Legend*>(
      ::ghostpacer::frame::Legend::internal_default_instance());
  ::ghostpacer::frame::_Frame_default_instance_._instance.get_mutable()->menu_ = const_cast< ::ghostpacer::frame::Menu*>(
      ::ghostpacer::frame::Menu::internal_default_instance());
  ::ghostpacer::frame::_Frame_default_instance_._instance.get_mutable()->banner_ = const_cast< ::ghostpacer::frame::Banner*>(
      ::ghostpacer::frame::Banner::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kAvatarFieldNumber;
const int Frame::kLegendFieldNumber;
const int Frame::kMenuFieldNumber;
const int Frame::kBannerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frame1_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ghostpacer.frame.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatar()) {
    avatar_ = new ::ghostpacer::frame::Avatar(*from.avatar_);
  } else {
    avatar_ = NULL;
  }
  if (from.has_legend()) {
    legend_ = new ::ghostpacer::frame::Legend(*from.legend_);
  } else {
    legend_ = NULL;
  }
  if (from.has_menu()) {
    menu_ = new ::ghostpacer::frame::Menu(*from.menu_);
  } else {
    menu_ = NULL;
  }
  if (from.has_banner()) {
    banner_ = new ::ghostpacer::frame::Banner(*from.banner_);
  } else {
    banner_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ghostpacer.frame.Frame)
}

void Frame::SharedCtor() {
  ::memset(&avatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banner_) -
      reinterpret_cast<char*>(&avatar_)) + sizeof(banner_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:ghostpacer.frame.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete legend_;
  if (this != internal_default_instance()) delete menu_;
  if (this != internal_default_instance()) delete banner_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  ::protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frame1_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:ghostpacer.frame.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) {
    delete avatar_;
  }
  avatar_ = NULL;
  if (GetArenaNoVirtual() == NULL && legend_ != NULL) {
    delete legend_;
  }
  legend_ = NULL;
  if (GetArenaNoVirtual() == NULL && menu_ != NULL) {
    delete menu_;
  }
  menu_ = NULL;
  if (GetArenaNoVirtual() == NULL && banner_ != NULL) {
    delete banner_;
  }
  banner_ = NULL;
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ghostpacer.frame.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ghostpacer.frame.Avatar avatar = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Legend legend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_legend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Menu menu = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ghostpacer.frame.Banner banner = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ghostpacer.frame.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ghostpacer.frame.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ghostpacer.frame.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Avatar avatar = 1;
  if (this->has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_avatar(), output);
  }

  // .ghostpacer.frame.Legend legend = 2;
  if (this->has_legend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_legend(), output);
  }

  // .ghostpacer.frame.Menu menu = 3;
  if (this->has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_menu(), output);
  }

  // .ghostpacer.frame.Banner banner = 4;
  if (this->has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_banner(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ghostpacer.frame.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ghostpacer.frame.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ghostpacer.frame.Avatar avatar = 1;
  if (this->has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_avatar(), deterministic, target);
  }

  // .ghostpacer.frame.Legend legend = 2;
  if (this->has_legend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_legend(), deterministic, target);
  }

  // .ghostpacer.frame.Menu menu = 3;
  if (this->has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_menu(), deterministic, target);
  }

  // .ghostpacer.frame.Banner banner = 4;
  if (this->has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_banner(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ghostpacer.frame.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ghostpacer.frame.Frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ghostpacer.frame.Avatar avatar = 1;
  if (this->has_avatar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatar_);
  }

  // .ghostpacer.frame.Legend legend = 2;
  if (this->has_legend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *legend_);
  }

  // .ghostpacer.frame.Menu menu = 3;
  if (this->has_menu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *menu_);
  }

  // .ghostpacer.frame.Banner banner = 4;
  if (this->has_banner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *banner_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ghostpacer.frame.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ghostpacer.frame.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ghostpacer.frame.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ghostpacer.frame.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar()) {
    mutable_avatar()->::ghostpacer::frame::Avatar::MergeFrom(from.avatar());
  }
  if (from.has_legend()) {
    mutable_legend()->::ghostpacer::frame::Legend::MergeFrom(from.legend());
  }
  if (from.has_menu()) {
    mutable_menu()->::ghostpacer::frame::Menu::MergeFrom(from.menu());
  }
  if (from.has_banner()) {
    mutable_banner()->::ghostpacer::frame::Banner::MergeFrom(from.banner());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ghostpacer.frame.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ghostpacer.frame.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  swap(avatar_, other->avatar_);
  swap(legend_, other->legend_);
  swap(menu_, other->menu_);
  swap(banner_, other->banner_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_frame1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frame1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace frame
}  // namespace ghostpacer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Vec3* Arena::CreateMaybeMessage< ::ghostpacer::frame::Vec3 >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Vec3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Mat3* Arena::CreateMaybeMessage< ::ghostpacer::frame::Mat3 >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Mat3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Avatar* Arena::CreateMaybeMessage< ::ghostpacer::frame::Avatar >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Avatar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Menu* Arena::CreateMaybeMessage< ::ghostpacer::frame::Menu >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Menu >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Banner* Arena::CreateMaybeMessage< ::ghostpacer::frame::Banner >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Banner >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Legend* Arena::CreateMaybeMessage< ::ghostpacer::frame::Legend >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Legend >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ghostpacer::frame::Frame* Arena::CreateMaybeMessage< ::ghostpacer::frame::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::ghostpacer::frame::Frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
