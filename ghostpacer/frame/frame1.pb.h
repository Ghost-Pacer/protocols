// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frame1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frame1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frame1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frame1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frame1_2eproto;
namespace ghostpacer {
namespace frame {
class Avatar;
class AvatarDefaultTypeInternal;
extern AvatarDefaultTypeInternal _Avatar_default_instance_;
class Banner;
class BannerDefaultTypeInternal;
extern BannerDefaultTypeInternal _Banner_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Legend;
class LegendDefaultTypeInternal;
extern LegendDefaultTypeInternal _Legend_default_instance_;
class Mat3;
class Mat3DefaultTypeInternal;
extern Mat3DefaultTypeInternal _Mat3_default_instance_;
class Menu;
class MenuDefaultTypeInternal;
extern MenuDefaultTypeInternal _Menu_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace frame
}  // namespace ghostpacer
PROTOBUF_NAMESPACE_OPEN
template<> ::ghostpacer::frame::Avatar* Arena::CreateMaybeMessage<::ghostpacer::frame::Avatar>(Arena*);
template<> ::ghostpacer::frame::Banner* Arena::CreateMaybeMessage<::ghostpacer::frame::Banner>(Arena*);
template<> ::ghostpacer::frame::Frame* Arena::CreateMaybeMessage<::ghostpacer::frame::Frame>(Arena*);
template<> ::ghostpacer::frame::Legend* Arena::CreateMaybeMessage<::ghostpacer::frame::Legend>(Arena*);
template<> ::ghostpacer::frame::Mat3* Arena::CreateMaybeMessage<::ghostpacer::frame::Mat3>(Arena*);
template<> ::ghostpacer::frame::Menu* Arena::CreateMaybeMessage<::ghostpacer::frame::Menu>(Arena*);
template<> ::ghostpacer::frame::Vec3* Arena::CreateMaybeMessage<::ghostpacer::frame::Vec3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ghostpacer {
namespace frame {

enum Banner_Position : int {
  Banner_Position_TOP = 0,
  Banner_Position_CENTER = 1,
  Banner_Position_Banner_Position_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Banner_Position_Banner_Position_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Banner_Position_IsValid(int value);
constexpr Banner_Position Banner_Position_Position_MIN = Banner_Position_TOP;
constexpr Banner_Position Banner_Position_Position_MAX = Banner_Position_CENTER;
constexpr int Banner_Position_Position_ARRAYSIZE = Banner_Position_Position_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Banner_Position_descriptor();
template<typename T>
inline const std::string& Banner_Position_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Banner_Position>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Banner_Position_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Banner_Position_descriptor(), enum_t_value);
}
inline bool Banner_Position_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Banner_Position* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Banner_Position>(
    Banner_Position_descriptor(), name, value);
}
// ===================================================================

class Vec3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Vec3) */ {
 public:
  inline Vec3() : Vec3(nullptr) {}
  virtual ~Vec3();

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(nullptr);
  }

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Vec3";
  }
  protected:
  explicit Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Vec3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Mat3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Mat3) */ {
 public:
  inline Mat3() : Mat3(nullptr) {}
  virtual ~Mat3();

  Mat3(const Mat3& from);
  Mat3(Mat3&& from) noexcept
    : Mat3() {
    *this = ::std::move(from);
  }

  inline Mat3& operator=(const Mat3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mat3& operator=(Mat3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mat3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3* internal_default_instance() {
    return reinterpret_cast<const Mat3*>(
               &_Mat3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mat3& a, Mat3& b) {
    a.Swap(&b);
  }
  inline void Swap(Mat3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mat3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mat3* New() const final {
    return CreateMaybeMessage<Mat3>(nullptr);
  }

  Mat3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mat3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mat3& from);
  void MergeFrom(const Mat3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Mat3";
  }
  protected:
  explicit Mat3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRow1FieldNumber = 1,
    kRow2FieldNumber = 2,
    kRow3FieldNumber = 3,
  };
  // .ghostpacer.frame.Vec3 row1 = 1;
  bool has_row1() const;
  private:
  bool _internal_has_row1() const;
  public:
  void clear_row1();
  const ::ghostpacer::frame::Vec3& row1() const;
  ::ghostpacer::frame::Vec3* release_row1();
  ::ghostpacer::frame::Vec3* mutable_row1();
  void set_allocated_row1(::ghostpacer::frame::Vec3* row1);
  private:
  const ::ghostpacer::frame::Vec3& _internal_row1() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_row1();
  public:
  void unsafe_arena_set_allocated_row1(
      ::ghostpacer::frame::Vec3* row1);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_row1();

  // .ghostpacer.frame.Vec3 row2 = 2;
  bool has_row2() const;
  private:
  bool _internal_has_row2() const;
  public:
  void clear_row2();
  const ::ghostpacer::frame::Vec3& row2() const;
  ::ghostpacer::frame::Vec3* release_row2();
  ::ghostpacer::frame::Vec3* mutable_row2();
  void set_allocated_row2(::ghostpacer::frame::Vec3* row2);
  private:
  const ::ghostpacer::frame::Vec3& _internal_row2() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_row2();
  public:
  void unsafe_arena_set_allocated_row2(
      ::ghostpacer::frame::Vec3* row2);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_row2();

  // .ghostpacer.frame.Vec3 row3 = 3;
  bool has_row3() const;
  private:
  bool _internal_has_row3() const;
  public:
  void clear_row3();
  const ::ghostpacer::frame::Vec3& row3() const;
  ::ghostpacer::frame::Vec3* release_row3();
  ::ghostpacer::frame::Vec3* mutable_row3();
  void set_allocated_row3(::ghostpacer::frame::Vec3* row3);
  private:
  const ::ghostpacer::frame::Vec3& _internal_row3() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_row3();
  public:
  void unsafe_arena_set_allocated_row3(
      ::ghostpacer::frame::Vec3* row3);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_row3();

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Mat3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::frame::Vec3* row1_;
  ::ghostpacer::frame::Vec3* row2_;
  ::ghostpacer::frame::Vec3* row3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Avatar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Avatar) */ {
 public:
  inline Avatar() : Avatar(nullptr) {}
  virtual ~Avatar();

  Avatar(const Avatar& from);
  Avatar(Avatar&& from) noexcept
    : Avatar() {
    *this = ::std::move(from);
  }

  inline Avatar& operator=(const Avatar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Avatar& operator=(Avatar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Avatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Avatar* internal_default_instance() {
    return reinterpret_cast<const Avatar*>(
               &_Avatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Avatar& a, Avatar& b) {
    a.Swap(&b);
  }
  inline void Swap(Avatar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Avatar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Avatar* New() const final {
    return CreateMaybeMessage<Avatar>(nullptr);
  }

  Avatar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Avatar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Avatar& from);
  void MergeFrom(const Avatar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Avatar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Avatar";
  }
  protected:
  explicit Avatar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarPositionFieldNumber = 1,
    kAvatarRotationFieldNumber = 2,
    kCameraPositionFieldNumber = 4,
    kCameraRotationFieldNumber = 5,
    kAnimationPhaseFieldNumber = 3,
  };
  // .ghostpacer.frame.Vec3 avatarPosition = 1;
  bool has_avatarposition() const;
  private:
  bool _internal_has_avatarposition() const;
  public:
  void clear_avatarposition();
  const ::ghostpacer::frame::Vec3& avatarposition() const;
  ::ghostpacer::frame::Vec3* release_avatarposition();
  ::ghostpacer::frame::Vec3* mutable_avatarposition();
  void set_allocated_avatarposition(::ghostpacer::frame::Vec3* avatarposition);
  private:
  const ::ghostpacer::frame::Vec3& _internal_avatarposition() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_avatarposition();
  public:
  void unsafe_arena_set_allocated_avatarposition(
      ::ghostpacer::frame::Vec3* avatarposition);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_avatarposition();

  // .ghostpacer.frame.Vec3 avatarRotation = 2;
  bool has_avatarrotation() const;
  private:
  bool _internal_has_avatarrotation() const;
  public:
  void clear_avatarrotation();
  const ::ghostpacer::frame::Vec3& avatarrotation() const;
  ::ghostpacer::frame::Vec3* release_avatarrotation();
  ::ghostpacer::frame::Vec3* mutable_avatarrotation();
  void set_allocated_avatarrotation(::ghostpacer::frame::Vec3* avatarrotation);
  private:
  const ::ghostpacer::frame::Vec3& _internal_avatarrotation() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_avatarrotation();
  public:
  void unsafe_arena_set_allocated_avatarrotation(
      ::ghostpacer::frame::Vec3* avatarrotation);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_avatarrotation();

  // .ghostpacer.frame.Vec3 cameraPosition = 4;
  bool has_cameraposition() const;
  private:
  bool _internal_has_cameraposition() const;
  public:
  void clear_cameraposition();
  const ::ghostpacer::frame::Vec3& cameraposition() const;
  ::ghostpacer::frame::Vec3* release_cameraposition();
  ::ghostpacer::frame::Vec3* mutable_cameraposition();
  void set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition);
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameraposition() const;
  ::ghostpacer::frame::Vec3* _internal_mutable_cameraposition();
  public:
  void unsafe_arena_set_allocated_cameraposition(
      ::ghostpacer::frame::Vec3* cameraposition);
  ::ghostpacer::frame::Vec3* unsafe_arena_release_cameraposition();

  // .ghostpacer.frame.Mat3 cameraRotation = 5;
  bool has_camerarotation() const;
  private:
  bool _internal_has_camerarotation() const;
  public:
  void clear_camerarotation();
  const ::ghostpacer::frame::Mat3& camerarotation() const;
  ::ghostpacer::frame::Mat3* release_camerarotation();
  ::ghostpacer::frame::Mat3* mutable_camerarotation();
  void set_allocated_camerarotation(::ghostpacer::frame::Mat3* camerarotation);
  private:
  const ::ghostpacer::frame::Mat3& _internal_camerarotation() const;
  ::ghostpacer::frame::Mat3* _internal_mutable_camerarotation();
  public:
  void unsafe_arena_set_allocated_camerarotation(
      ::ghostpacer::frame::Mat3* camerarotation);
  ::ghostpacer::frame::Mat3* unsafe_arena_release_camerarotation();

  // double animationPhase = 3;
  void clear_animationphase();
  double animationphase() const;
  void set_animationphase(double value);
  private:
  double _internal_animationphase() const;
  void _internal_set_animationphase(double value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Avatar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::frame::Vec3* avatarposition_;
  ::ghostpacer::frame::Vec3* avatarrotation_;
  ::ghostpacer::frame::Vec3* cameraposition_;
  ::ghostpacer::frame::Mat3* camerarotation_;
  double animationphase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Menu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Menu) */ {
 public:
  inline Menu() : Menu(nullptr) {}
  virtual ~Menu();

  Menu(const Menu& from);
  Menu(Menu&& from) noexcept
    : Menu() {
    *this = ::std::move(from);
  }

  inline Menu& operator=(const Menu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Menu& operator=(Menu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Menu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Menu* internal_default_instance() {
    return reinterpret_cast<const Menu*>(
               &_Menu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Menu& a, Menu& b) {
    a.Swap(&b);
  }
  inline void Swap(Menu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Menu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Menu* New() const final {
    return CreateMaybeMessage<Menu>(nullptr);
  }

  Menu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Menu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Menu& from);
  void MergeFrom(const Menu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Menu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Menu";
  }
  protected:
  explicit Menu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kActiveEntryIndexFieldNumber = 2,
  };
  // repeated string entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // uint32 activeEntryIndex = 2;
  void clear_activeentryindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 activeentryindex() const;
  void set_activeentryindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activeentryindex() const;
  void _internal_set_activeentryindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Menu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activeentryindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Banner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Banner) */ {
 public:
  inline Banner() : Banner(nullptr) {}
  virtual ~Banner();

  Banner(const Banner& from);
  Banner(Banner&& from) noexcept
    : Banner() {
    *this = ::std::move(from);
  }

  inline Banner& operator=(const Banner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Banner& operator=(Banner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Banner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Banner* internal_default_instance() {
    return reinterpret_cast<const Banner*>(
               &_Banner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Banner& a, Banner& b) {
    a.Swap(&b);
  }
  inline void Swap(Banner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Banner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Banner* New() const final {
    return CreateMaybeMessage<Banner>(nullptr);
  }

  Banner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Banner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Banner& from);
  void MergeFrom(const Banner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Banner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Banner";
  }
  protected:
  explicit Banner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Banner_Position Position;
  static constexpr Position TOP =
    Banner_Position_TOP;
  static constexpr Position CENTER =
    Banner_Position_CENTER;
  static inline bool Position_IsValid(int value) {
    return Banner_Position_IsValid(value);
  }
  static constexpr Position Position_MIN =
    Banner_Position_Position_MIN;
  static constexpr Position Position_MAX =
    Banner_Position_Position_MAX;
  static constexpr int Position_ARRAYSIZE =
    Banner_Position_Position_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Position_descriptor() {
    return Banner_Position_descriptor();
  }
  template<typename T>
  static inline const std::string& Position_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Position>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Position_Name.");
    return Banner_Position_Name(enum_t_value);
  }
  static inline bool Position_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Position* value) {
    return Banner_Position_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // repeated string lines = 1;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  const std::string& lines(int index) const;
  std::string* mutable_lines(int index);
  void set_lines(int index, const std::string& value);
  void set_lines(int index, std::string&& value);
  void set_lines(int index, const char* value);
  void set_lines(int index, const char* value, size_t size);
  std::string* add_lines();
  void add_lines(const std::string& value);
  void add_lines(std::string&& value);
  void add_lines(const char* value);
  void add_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lines();
  private:
  const std::string& _internal_lines(int index) const;
  std::string* _internal_add_lines();
  public:

  // .ghostpacer.frame.Banner.Position position = 2;
  void clear_position();
  ::ghostpacer::frame::Banner_Position position() const;
  void set_position(::ghostpacer::frame::Banner_Position value);
  private:
  ::ghostpacer::frame::Banner_Position _internal_position() const;
  void _internal_set_position(::ghostpacer::frame::Banner_Position value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Banner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lines_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Legend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Legend) */ {
 public:
  inline Legend() : Legend(nullptr) {}
  virtual ~Legend();

  Legend(const Legend& from);
  Legend(Legend&& from) noexcept
    : Legend() {
    *this = ::std::move(from);
  }

  inline Legend& operator=(const Legend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Legend& operator=(Legend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Legend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Legend* internal_default_instance() {
    return reinterpret_cast<const Legend*>(
               &_Legend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Legend& a, Legend& b) {
    a.Swap(&b);
  }
  inline void Swap(Legend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Legend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Legend* New() const final {
    return CreateMaybeMessage<Legend>(nullptr);
  }

  Legend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Legend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Legend& from);
  void MergeFrom(const Legend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Legend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Legend";
  }
  protected:
  explicit Legend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpActiveFieldNumber = 1,
    kSelectActiveFieldNumber = 2,
    kDownActiveFieldNumber = 3,
  };
  // bool upActive = 1;
  void clear_upactive();
  bool upactive() const;
  void set_upactive(bool value);
  private:
  bool _internal_upactive() const;
  void _internal_set_upactive(bool value);
  public:

  // bool selectActive = 2;
  void clear_selectactive();
  bool selectactive() const;
  void set_selectactive(bool value);
  private:
  bool _internal_selectactive() const;
  void _internal_set_selectactive(bool value);
  public:

  // bool downActive = 3;
  void clear_downactive();
  bool downactive() const;
  void set_downactive(bool value);
  private:
  bool _internal_downactive() const;
  void _internal_set_downactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Legend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool upactive_;
  bool selectactive_;
  bool downactive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghostpacer.frame.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frame1_2eproto);
    return ::descriptor_table_frame1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarFieldNumber = 1,
    kLegendFieldNumber = 2,
    kMenuFieldNumber = 3,
    kBannerFieldNumber = 4,
  };
  // .ghostpacer.frame.Avatar avatar = 1;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::ghostpacer::frame::Avatar& avatar() const;
  ::ghostpacer::frame::Avatar* release_avatar();
  ::ghostpacer::frame::Avatar* mutable_avatar();
  void set_allocated_avatar(::ghostpacer::frame::Avatar* avatar);
  private:
  const ::ghostpacer::frame::Avatar& _internal_avatar() const;
  ::ghostpacer::frame::Avatar* _internal_mutable_avatar();
  public:
  void unsafe_arena_set_allocated_avatar(
      ::ghostpacer::frame::Avatar* avatar);
  ::ghostpacer::frame::Avatar* unsafe_arena_release_avatar();

  // .ghostpacer.frame.Legend legend = 2;
  bool has_legend() const;
  private:
  bool _internal_has_legend() const;
  public:
  void clear_legend();
  const ::ghostpacer::frame::Legend& legend() const;
  ::ghostpacer::frame::Legend* release_legend();
  ::ghostpacer::frame::Legend* mutable_legend();
  void set_allocated_legend(::ghostpacer::frame::Legend* legend);
  private:
  const ::ghostpacer::frame::Legend& _internal_legend() const;
  ::ghostpacer::frame::Legend* _internal_mutable_legend();
  public:
  void unsafe_arena_set_allocated_legend(
      ::ghostpacer::frame::Legend* legend);
  ::ghostpacer::frame::Legend* unsafe_arena_release_legend();

  // .ghostpacer.frame.Menu menu = 3;
  bool has_menu() const;
  private:
  bool _internal_has_menu() const;
  public:
  void clear_menu();
  const ::ghostpacer::frame::Menu& menu() const;
  ::ghostpacer::frame::Menu* release_menu();
  ::ghostpacer::frame::Menu* mutable_menu();
  void set_allocated_menu(::ghostpacer::frame::Menu* menu);
  private:
  const ::ghostpacer::frame::Menu& _internal_menu() const;
  ::ghostpacer::frame::Menu* _internal_mutable_menu();
  public:
  void unsafe_arena_set_allocated_menu(
      ::ghostpacer::frame::Menu* menu);
  ::ghostpacer::frame::Menu* unsafe_arena_release_menu();

  // .ghostpacer.frame.Banner banner = 4;
  bool has_banner() const;
  private:
  bool _internal_has_banner() const;
  public:
  void clear_banner();
  const ::ghostpacer::frame::Banner& banner() const;
  ::ghostpacer::frame::Banner* release_banner();
  ::ghostpacer::frame::Banner* mutable_banner();
  void set_allocated_banner(::ghostpacer::frame::Banner* banner);
  private:
  const ::ghostpacer::frame::Banner& _internal_banner() const;
  ::ghostpacer::frame::Banner* _internal_mutable_banner();
  public:
  void unsafe_arena_set_allocated_banner(
      ::ghostpacer::frame::Banner* banner);
  ::ghostpacer::frame::Banner* unsafe_arena_release_banner();

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ghostpacer::frame::Avatar* avatar_;
  ::ghostpacer::frame::Legend* legend_;
  ::ghostpacer::frame::Menu* menu_;
  ::ghostpacer::frame::Banner* banner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// double x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline double Vec3::_internal_x() const {
  return x_;
}
inline double Vec3::x() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.x)
  return _internal_x();
}
inline void Vec3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vec3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.x)
}

// double y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline double Vec3::_internal_y() const {
  return y_;
}
inline double Vec3::y() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.y)
  return _internal_y();
}
inline void Vec3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vec3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.y)
}

// double z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline double Vec3::_internal_z() const {
  return z_;
}
inline double Vec3::z() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.z)
  return _internal_z();
}
inline void Vec3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vec3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.z)
}

// -------------------------------------------------------------------

// Mat3

// .ghostpacer.frame.Vec3 row1 = 1;
inline bool Mat3::_internal_has_row1() const {
  return this != internal_default_instance() && row1_ != nullptr;
}
inline bool Mat3::has_row1() const {
  return _internal_has_row1();
}
inline void Mat3::clear_row1() {
  if (GetArena() == nullptr && row1_ != nullptr) {
    delete row1_;
  }
  row1_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row1() const {
  const ::ghostpacer::frame::Vec3* p = row1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Mat3::row1() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row1)
  return _internal_row1();
}
inline void Mat3::unsafe_arena_set_allocated_row1(
    ::ghostpacer::frame::Vec3* row1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row1_);
  }
  row1_ = row1;
  if (row1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Mat3.row1)
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row1() {
  
  ::ghostpacer::frame::Vec3* temp = row1_;
  row1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::unsafe_arena_release_row1() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row1)
  
  ::ghostpacer::frame::Vec3* temp = row1_;
  row1_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::_internal_mutable_row1() {
  
  if (row1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    row1_ = p;
  }
  return row1_;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row1() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row1)
  return _internal_mutable_row1();
}
inline void Mat3::set_allocated_row1(::ghostpacer::frame::Vec3* row1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row1_;
  }
  if (row1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row1);
    if (message_arena != submessage_arena) {
      row1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row1, submessage_arena);
    }
    
  } else {
    
  }
  row1_ = row1;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row1)
}

// .ghostpacer.frame.Vec3 row2 = 2;
inline bool Mat3::_internal_has_row2() const {
  return this != internal_default_instance() && row2_ != nullptr;
}
inline bool Mat3::has_row2() const {
  return _internal_has_row2();
}
inline void Mat3::clear_row2() {
  if (GetArena() == nullptr && row2_ != nullptr) {
    delete row2_;
  }
  row2_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row2() const {
  const ::ghostpacer::frame::Vec3* p = row2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Mat3::row2() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row2)
  return _internal_row2();
}
inline void Mat3::unsafe_arena_set_allocated_row2(
    ::ghostpacer::frame::Vec3* row2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row2_);
  }
  row2_ = row2;
  if (row2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Mat3.row2)
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row2() {
  
  ::ghostpacer::frame::Vec3* temp = row2_;
  row2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::unsafe_arena_release_row2() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row2)
  
  ::ghostpacer::frame::Vec3* temp = row2_;
  row2_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::_internal_mutable_row2() {
  
  if (row2_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    row2_ = p;
  }
  return row2_;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row2() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row2)
  return _internal_mutable_row2();
}
inline void Mat3::set_allocated_row2(::ghostpacer::frame::Vec3* row2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row2_;
  }
  if (row2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row2);
    if (message_arena != submessage_arena) {
      row2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row2, submessage_arena);
    }
    
  } else {
    
  }
  row2_ = row2;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row2)
}

// .ghostpacer.frame.Vec3 row3 = 3;
inline bool Mat3::_internal_has_row3() const {
  return this != internal_default_instance() && row3_ != nullptr;
}
inline bool Mat3::has_row3() const {
  return _internal_has_row3();
}
inline void Mat3::clear_row3() {
  if (GetArena() == nullptr && row3_ != nullptr) {
    delete row3_;
  }
  row3_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row3() const {
  const ::ghostpacer::frame::Vec3* p = row3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Mat3::row3() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row3)
  return _internal_row3();
}
inline void Mat3::unsafe_arena_set_allocated_row3(
    ::ghostpacer::frame::Vec3* row3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row3_);
  }
  row3_ = row3;
  if (row3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Mat3.row3)
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row3() {
  
  ::ghostpacer::frame::Vec3* temp = row3_;
  row3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::unsafe_arena_release_row3() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row3)
  
  ::ghostpacer::frame::Vec3* temp = row3_;
  row3_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::_internal_mutable_row3() {
  
  if (row3_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    row3_ = p;
  }
  return row3_;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row3() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row3)
  return _internal_mutable_row3();
}
inline void Mat3::set_allocated_row3(::ghostpacer::frame::Vec3* row3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row3_;
  }
  if (row3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row3);
    if (message_arena != submessage_arena) {
      row3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row3, submessage_arena);
    }
    
  } else {
    
  }
  row3_ = row3;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row3)
}

// -------------------------------------------------------------------

// Avatar

// .ghostpacer.frame.Vec3 avatarPosition = 1;
inline bool Avatar::_internal_has_avatarposition() const {
  return this != internal_default_instance() && avatarposition_ != nullptr;
}
inline bool Avatar::has_avatarposition() const {
  return _internal_has_avatarposition();
}
inline void Avatar::clear_avatarposition() {
  if (GetArena() == nullptr && avatarposition_ != nullptr) {
    delete avatarposition_;
  }
  avatarposition_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_avatarposition() const {
  const ::ghostpacer::frame::Vec3* p = avatarposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Avatar::avatarposition() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.avatarPosition)
  return _internal_avatarposition();
}
inline void Avatar::unsafe_arena_set_allocated_avatarposition(
    ::ghostpacer::frame::Vec3* avatarposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatarposition_);
  }
  avatarposition_ = avatarposition;
  if (avatarposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Avatar.avatarPosition)
}
inline ::ghostpacer::frame::Vec3* Avatar::release_avatarposition() {
  
  ::ghostpacer::frame::Vec3* temp = avatarposition_;
  avatarposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::unsafe_arena_release_avatarposition() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.avatarPosition)
  
  ::ghostpacer::frame::Vec3* temp = avatarposition_;
  avatarposition_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::_internal_mutable_avatarposition() {
  
  if (avatarposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    avatarposition_ = p;
  }
  return avatarposition_;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_avatarposition() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.avatarPosition)
  return _internal_mutable_avatarposition();
}
inline void Avatar::set_allocated_avatarposition(::ghostpacer::frame::Vec3* avatarposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avatarposition_;
  }
  if (avatarposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avatarposition);
    if (message_arena != submessage_arena) {
      avatarposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatarposition, submessage_arena);
    }
    
  } else {
    
  }
  avatarposition_ = avatarposition;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.avatarPosition)
}

// .ghostpacer.frame.Vec3 avatarRotation = 2;
inline bool Avatar::_internal_has_avatarrotation() const {
  return this != internal_default_instance() && avatarrotation_ != nullptr;
}
inline bool Avatar::has_avatarrotation() const {
  return _internal_has_avatarrotation();
}
inline void Avatar::clear_avatarrotation() {
  if (GetArena() == nullptr && avatarrotation_ != nullptr) {
    delete avatarrotation_;
  }
  avatarrotation_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_avatarrotation() const {
  const ::ghostpacer::frame::Vec3* p = avatarrotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Avatar::avatarrotation() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.avatarRotation)
  return _internal_avatarrotation();
}
inline void Avatar::unsafe_arena_set_allocated_avatarrotation(
    ::ghostpacer::frame::Vec3* avatarrotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatarrotation_);
  }
  avatarrotation_ = avatarrotation;
  if (avatarrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Avatar.avatarRotation)
}
inline ::ghostpacer::frame::Vec3* Avatar::release_avatarrotation() {
  
  ::ghostpacer::frame::Vec3* temp = avatarrotation_;
  avatarrotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::unsafe_arena_release_avatarrotation() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.avatarRotation)
  
  ::ghostpacer::frame::Vec3* temp = avatarrotation_;
  avatarrotation_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::_internal_mutable_avatarrotation() {
  
  if (avatarrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    avatarrotation_ = p;
  }
  return avatarrotation_;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_avatarrotation() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.avatarRotation)
  return _internal_mutable_avatarrotation();
}
inline void Avatar::set_allocated_avatarrotation(::ghostpacer::frame::Vec3* avatarrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avatarrotation_;
  }
  if (avatarrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avatarrotation);
    if (message_arena != submessage_arena) {
      avatarrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatarrotation, submessage_arena);
    }
    
  } else {
    
  }
  avatarrotation_ = avatarrotation;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.avatarRotation)
}

// double animationPhase = 3;
inline void Avatar::clear_animationphase() {
  animationphase_ = 0;
}
inline double Avatar::_internal_animationphase() const {
  return animationphase_;
}
inline double Avatar::animationphase() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.animationPhase)
  return _internal_animationphase();
}
inline void Avatar::_internal_set_animationphase(double value) {
  
  animationphase_ = value;
}
inline void Avatar::set_animationphase(double value) {
  _internal_set_animationphase(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Avatar.animationPhase)
}

// .ghostpacer.frame.Vec3 cameraPosition = 4;
inline bool Avatar::_internal_has_cameraposition() const {
  return this != internal_default_instance() && cameraposition_ != nullptr;
}
inline bool Avatar::has_cameraposition() const {
  return _internal_has_cameraposition();
}
inline void Avatar::clear_cameraposition() {
  if (GetArena() == nullptr && cameraposition_ != nullptr) {
    delete cameraposition_;
  }
  cameraposition_ = nullptr;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_cameraposition() const {
  const ::ghostpacer::frame::Vec3* p = cameraposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline const ::ghostpacer::frame::Vec3& Avatar::cameraposition() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.cameraPosition)
  return _internal_cameraposition();
}
inline void Avatar::unsafe_arena_set_allocated_cameraposition(
    ::ghostpacer::frame::Vec3* cameraposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cameraposition_);
  }
  cameraposition_ = cameraposition;
  if (cameraposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Avatar.cameraPosition)
}
inline ::ghostpacer::frame::Vec3* Avatar::release_cameraposition() {
  
  ::ghostpacer::frame::Vec3* temp = cameraposition_;
  cameraposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::unsafe_arena_release_cameraposition() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.cameraPosition)
  
  ::ghostpacer::frame::Vec3* temp = cameraposition_;
  cameraposition_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::_internal_mutable_cameraposition() {
  
  if (cameraposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArena());
    cameraposition_ = p;
  }
  return cameraposition_;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_cameraposition() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.cameraPosition)
  return _internal_mutable_cameraposition();
}
inline void Avatar::set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cameraposition_;
  }
  if (cameraposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cameraposition);
    if (message_arena != submessage_arena) {
      cameraposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameraposition, submessage_arena);
    }
    
  } else {
    
  }
  cameraposition_ = cameraposition;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.cameraPosition)
}

// .ghostpacer.frame.Mat3 cameraRotation = 5;
inline bool Avatar::_internal_has_camerarotation() const {
  return this != internal_default_instance() && camerarotation_ != nullptr;
}
inline bool Avatar::has_camerarotation() const {
  return _internal_has_camerarotation();
}
inline void Avatar::clear_camerarotation() {
  if (GetArena() == nullptr && camerarotation_ != nullptr) {
    delete camerarotation_;
  }
  camerarotation_ = nullptr;
}
inline const ::ghostpacer::frame::Mat3& Avatar::_internal_camerarotation() const {
  const ::ghostpacer::frame::Mat3* p = camerarotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Mat3*>(
      &::ghostpacer::frame::_Mat3_default_instance_);
}
inline const ::ghostpacer::frame::Mat3& Avatar::camerarotation() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.cameraRotation)
  return _internal_camerarotation();
}
inline void Avatar::unsafe_arena_set_allocated_camerarotation(
    ::ghostpacer::frame::Mat3* camerarotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerarotation_);
  }
  camerarotation_ = camerarotation;
  if (camerarotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Avatar.cameraRotation)
}
inline ::ghostpacer::frame::Mat3* Avatar::release_camerarotation() {
  
  ::ghostpacer::frame::Mat3* temp = camerarotation_;
  camerarotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Mat3* Avatar::unsafe_arena_release_camerarotation() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.cameraRotation)
  
  ::ghostpacer::frame::Mat3* temp = camerarotation_;
  camerarotation_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Mat3* Avatar::_internal_mutable_camerarotation() {
  
  if (camerarotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Mat3>(GetArena());
    camerarotation_ = p;
  }
  return camerarotation_;
}
inline ::ghostpacer::frame::Mat3* Avatar::mutable_camerarotation() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.cameraRotation)
  return _internal_mutable_camerarotation();
}
inline void Avatar::set_allocated_camerarotation(::ghostpacer::frame::Mat3* camerarotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camerarotation_;
  }
  if (camerarotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camerarotation);
    if (message_arena != submessage_arena) {
      camerarotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerarotation, submessage_arena);
    }
    
  } else {
    
  }
  camerarotation_ = camerarotation;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.cameraRotation)
}

// -------------------------------------------------------------------

// Menu

// repeated string entries = 1;
inline int Menu::_internal_entries_size() const {
  return entries_.size();
}
inline int Menu::entries_size() const {
  return _internal_entries_size();
}
inline void Menu::clear_entries() {
  entries_.Clear();
}
inline std::string* Menu::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:ghostpacer.frame.Menu.entries)
  return _internal_add_entries();
}
inline const std::string& Menu::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& Menu::entries(int index) const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Menu.entries)
  return _internal_entries(index);
}
inline std::string* Menu::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Menu.entries)
  return entries_.Mutable(index);
}
inline void Menu::set_entries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.entries)
  entries_.Mutable(index)->assign(value);
}
inline void Menu::set_entries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.entries)
  entries_.Mutable(index)->assign(std::move(value));
}
inline void Menu::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ghostpacer.frame.Menu.entries)
}
inline void Menu::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.frame.Menu.entries)
}
inline std::string* Menu::_internal_add_entries() {
  return entries_.Add();
}
inline void Menu::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Menu.entries)
}
inline void Menu::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Menu.entries)
}
inline void Menu::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ghostpacer.frame.Menu.entries)
}
inline void Menu::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ghostpacer.frame.Menu.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Menu::entries() const {
  // @@protoc_insertion_point(field_list:ghostpacer.frame.Menu.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Menu::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ghostpacer.frame.Menu.entries)
  return &entries_;
}

// uint32 activeEntryIndex = 2;
inline void Menu::clear_activeentryindex() {
  activeentryindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Menu::_internal_activeentryindex() const {
  return activeentryindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Menu::activeentryindex() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Menu.activeEntryIndex)
  return _internal_activeentryindex();
}
inline void Menu::_internal_set_activeentryindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  activeentryindex_ = value;
}
inline void Menu::set_activeentryindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activeentryindex(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.activeEntryIndex)
}

// -------------------------------------------------------------------

// Banner

// repeated string lines = 1;
inline int Banner::_internal_lines_size() const {
  return lines_.size();
}
inline int Banner::lines_size() const {
  return _internal_lines_size();
}
inline void Banner::clear_lines() {
  lines_.Clear();
}
inline std::string* Banner::add_lines() {
  // @@protoc_insertion_point(field_add_mutable:ghostpacer.frame.Banner.lines)
  return _internal_add_lines();
}
inline const std::string& Banner::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const std::string& Banner::lines(int index) const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Banner.lines)
  return _internal_lines(index);
}
inline std::string* Banner::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Banner.lines)
  return lines_.Mutable(index);
}
inline void Banner::set_lines(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.lines)
  lines_.Mutable(index)->assign(value);
}
inline void Banner::set_lines(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.lines)
  lines_.Mutable(index)->assign(std::move(value));
}
inline void Banner::set_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ghostpacer.frame.Banner.lines)
}
inline void Banner::set_lines(int index, const char* value, size_t size) {
  lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.frame.Banner.lines)
}
inline std::string* Banner::_internal_add_lines() {
  return lines_.Add();
}
inline void Banner::add_lines(const std::string& value) {
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Banner.lines)
}
inline void Banner::add_lines(std::string&& value) {
  lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Banner.lines)
}
inline void Banner::add_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ghostpacer.frame.Banner.lines)
}
inline void Banner::add_lines(const char* value, size_t size) {
  lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ghostpacer.frame.Banner.lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Banner::lines() const {
  // @@protoc_insertion_point(field_list:ghostpacer.frame.Banner.lines)
  return lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Banner::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:ghostpacer.frame.Banner.lines)
  return &lines_;
}

// .ghostpacer.frame.Banner.Position position = 2;
inline void Banner::clear_position() {
  position_ = 0;
}
inline ::ghostpacer::frame::Banner_Position Banner::_internal_position() const {
  return static_cast< ::ghostpacer::frame::Banner_Position >(position_);
}
inline ::ghostpacer::frame::Banner_Position Banner::position() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Banner.position)
  return _internal_position();
}
inline void Banner::_internal_set_position(::ghostpacer::frame::Banner_Position value) {
  
  position_ = value;
}
inline void Banner::set_position(::ghostpacer::frame::Banner_Position value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.position)
}

// -------------------------------------------------------------------

// Legend

// bool upActive = 1;
inline void Legend::clear_upactive() {
  upactive_ = false;
}
inline bool Legend::_internal_upactive() const {
  return upactive_;
}
inline bool Legend::upactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.upActive)
  return _internal_upactive();
}
inline void Legend::_internal_set_upactive(bool value) {
  
  upactive_ = value;
}
inline void Legend::set_upactive(bool value) {
  _internal_set_upactive(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.upActive)
}

// bool selectActive = 2;
inline void Legend::clear_selectactive() {
  selectactive_ = false;
}
inline bool Legend::_internal_selectactive() const {
  return selectactive_;
}
inline bool Legend::selectactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.selectActive)
  return _internal_selectactive();
}
inline void Legend::_internal_set_selectactive(bool value) {
  
  selectactive_ = value;
}
inline void Legend::set_selectactive(bool value) {
  _internal_set_selectactive(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.selectActive)
}

// bool downActive = 3;
inline void Legend::clear_downactive() {
  downactive_ = false;
}
inline bool Legend::_internal_downactive() const {
  return downactive_;
}
inline bool Legend::downactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.downActive)
  return _internal_downactive();
}
inline void Legend::_internal_set_downactive(bool value) {
  
  downactive_ = value;
}
inline void Legend::set_downactive(bool value) {
  _internal_set_downactive(value);
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.downActive)
}

// -------------------------------------------------------------------

// Frame

// .ghostpacer.frame.Avatar avatar = 1;
inline bool Frame::_internal_has_avatar() const {
  return this != internal_default_instance() && avatar_ != nullptr;
}
inline bool Frame::has_avatar() const {
  return _internal_has_avatar();
}
inline void Frame::clear_avatar() {
  if (GetArena() == nullptr && avatar_ != nullptr) {
    delete avatar_;
  }
  avatar_ = nullptr;
}
inline const ::ghostpacer::frame::Avatar& Frame::_internal_avatar() const {
  const ::ghostpacer::frame::Avatar* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Avatar*>(
      &::ghostpacer::frame::_Avatar_default_instance_);
}
inline const ::ghostpacer::frame::Avatar& Frame::avatar() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.avatar)
  return _internal_avatar();
}
inline void Frame::unsafe_arena_set_allocated_avatar(
    ::ghostpacer::frame::Avatar* avatar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avatar_);
  }
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Frame.avatar)
}
inline ::ghostpacer::frame::Avatar* Frame::release_avatar() {
  
  ::ghostpacer::frame::Avatar* temp = avatar_;
  avatar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Avatar* Frame::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.avatar)
  
  ::ghostpacer::frame::Avatar* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Avatar* Frame::_internal_mutable_avatar() {
  
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Avatar>(GetArena());
    avatar_ = p;
  }
  return avatar_;
}
inline ::ghostpacer::frame::Avatar* Frame::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.avatar)
  return _internal_mutable_avatar();
}
inline void Frame::set_allocated_avatar(::ghostpacer::frame::Avatar* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avatar);
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    
  } else {
    
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.avatar)
}

// .ghostpacer.frame.Legend legend = 2;
inline bool Frame::_internal_has_legend() const {
  return this != internal_default_instance() && legend_ != nullptr;
}
inline bool Frame::has_legend() const {
  return _internal_has_legend();
}
inline void Frame::clear_legend() {
  if (GetArena() == nullptr && legend_ != nullptr) {
    delete legend_;
  }
  legend_ = nullptr;
}
inline const ::ghostpacer::frame::Legend& Frame::_internal_legend() const {
  const ::ghostpacer::frame::Legend* p = legend_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Legend*>(
      &::ghostpacer::frame::_Legend_default_instance_);
}
inline const ::ghostpacer::frame::Legend& Frame::legend() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.legend)
  return _internal_legend();
}
inline void Frame::unsafe_arena_set_allocated_legend(
    ::ghostpacer::frame::Legend* legend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_);
  }
  legend_ = legend;
  if (legend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Frame.legend)
}
inline ::ghostpacer::frame::Legend* Frame::release_legend() {
  
  ::ghostpacer::frame::Legend* temp = legend_;
  legend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Legend* Frame::unsafe_arena_release_legend() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.legend)
  
  ::ghostpacer::frame::Legend* temp = legend_;
  legend_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Legend* Frame::_internal_mutable_legend() {
  
  if (legend_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Legend>(GetArena());
    legend_ = p;
  }
  return legend_;
}
inline ::ghostpacer::frame::Legend* Frame::mutable_legend() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.legend)
  return _internal_mutable_legend();
}
inline void Frame::set_allocated_legend(::ghostpacer::frame::Legend* legend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete legend_;
  }
  if (legend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(legend);
    if (message_arena != submessage_arena) {
      legend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend, submessage_arena);
    }
    
  } else {
    
  }
  legend_ = legend;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.legend)
}

// .ghostpacer.frame.Menu menu = 3;
inline bool Frame::_internal_has_menu() const {
  return this != internal_default_instance() && menu_ != nullptr;
}
inline bool Frame::has_menu() const {
  return _internal_has_menu();
}
inline void Frame::clear_menu() {
  if (GetArena() == nullptr && menu_ != nullptr) {
    delete menu_;
  }
  menu_ = nullptr;
}
inline const ::ghostpacer::frame::Menu& Frame::_internal_menu() const {
  const ::ghostpacer::frame::Menu* p = menu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Menu*>(
      &::ghostpacer::frame::_Menu_default_instance_);
}
inline const ::ghostpacer::frame::Menu& Frame::menu() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.menu)
  return _internal_menu();
}
inline void Frame::unsafe_arena_set_allocated_menu(
    ::ghostpacer::frame::Menu* menu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(menu_);
  }
  menu_ = menu;
  if (menu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Frame.menu)
}
inline ::ghostpacer::frame::Menu* Frame::release_menu() {
  
  ::ghostpacer::frame::Menu* temp = menu_;
  menu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Menu* Frame::unsafe_arena_release_menu() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.menu)
  
  ::ghostpacer::frame::Menu* temp = menu_;
  menu_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Menu* Frame::_internal_mutable_menu() {
  
  if (menu_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Menu>(GetArena());
    menu_ = p;
  }
  return menu_;
}
inline ::ghostpacer::frame::Menu* Frame::mutable_menu() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.menu)
  return _internal_mutable_menu();
}
inline void Frame::set_allocated_menu(::ghostpacer::frame::Menu* menu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete menu_;
  }
  if (menu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(menu);
    if (message_arena != submessage_arena) {
      menu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, menu, submessage_arena);
    }
    
  } else {
    
  }
  menu_ = menu;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.menu)
}

// .ghostpacer.frame.Banner banner = 4;
inline bool Frame::_internal_has_banner() const {
  return this != internal_default_instance() && banner_ != nullptr;
}
inline bool Frame::has_banner() const {
  return _internal_has_banner();
}
inline void Frame::clear_banner() {
  if (GetArena() == nullptr && banner_ != nullptr) {
    delete banner_;
  }
  banner_ = nullptr;
}
inline const ::ghostpacer::frame::Banner& Frame::_internal_banner() const {
  const ::ghostpacer::frame::Banner* p = banner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ghostpacer::frame::Banner*>(
      &::ghostpacer::frame::_Banner_default_instance_);
}
inline const ::ghostpacer::frame::Banner& Frame::banner() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.banner)
  return _internal_banner();
}
inline void Frame::unsafe_arena_set_allocated_banner(
    ::ghostpacer::frame::Banner* banner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(banner_);
  }
  banner_ = banner;
  if (banner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ghostpacer.frame.Frame.banner)
}
inline ::ghostpacer::frame::Banner* Frame::release_banner() {
  
  ::ghostpacer::frame::Banner* temp = banner_;
  banner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ghostpacer::frame::Banner* Frame::unsafe_arena_release_banner() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.banner)
  
  ::ghostpacer::frame::Banner* temp = banner_;
  banner_ = nullptr;
  return temp;
}
inline ::ghostpacer::frame::Banner* Frame::_internal_mutable_banner() {
  
  if (banner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Banner>(GetArena());
    banner_ = p;
  }
  return banner_;
}
inline ::ghostpacer::frame::Banner* Frame::mutable_banner() {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.banner)
  return _internal_mutable_banner();
}
inline void Frame::set_allocated_banner(::ghostpacer::frame::Banner* banner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete banner_;
  }
  if (banner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(banner);
    if (message_arena != submessage_arena) {
      banner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, banner, submessage_arena);
    }
    
  } else {
    
  }
  banner_ = banner;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.banner)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frame
}  // namespace ghostpacer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ghostpacer::frame::Banner_Position> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ghostpacer::frame::Banner_Position>() {
  return ::ghostpacer::frame::Banner_Position_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frame1_2eproto
