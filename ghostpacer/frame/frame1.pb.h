// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame1.proto

#ifndef PROTOBUF_INCLUDED_frame1_2eproto
#define PROTOBUF_INCLUDED_frame1_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_frame1_2eproto 

namespace protobuf_frame1_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_frame1_2eproto
namespace ghostpacer {
namespace frame {
class Avatar;
class AvatarDefaultTypeInternal;
extern AvatarDefaultTypeInternal _Avatar_default_instance_;
class Banner;
class BannerDefaultTypeInternal;
extern BannerDefaultTypeInternal _Banner_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Legend;
class LegendDefaultTypeInternal;
extern LegendDefaultTypeInternal _Legend_default_instance_;
class Mat3;
class Mat3DefaultTypeInternal;
extern Mat3DefaultTypeInternal _Mat3_default_instance_;
class Menu;
class MenuDefaultTypeInternal;
extern MenuDefaultTypeInternal _Menu_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace frame
}  // namespace ghostpacer
namespace google {
namespace protobuf {
template<> ::ghostpacer::frame::Avatar* Arena::CreateMaybeMessage<::ghostpacer::frame::Avatar>(Arena*);
template<> ::ghostpacer::frame::Banner* Arena::CreateMaybeMessage<::ghostpacer::frame::Banner>(Arena*);
template<> ::ghostpacer::frame::Frame* Arena::CreateMaybeMessage<::ghostpacer::frame::Frame>(Arena*);
template<> ::ghostpacer::frame::Legend* Arena::CreateMaybeMessage<::ghostpacer::frame::Legend>(Arena*);
template<> ::ghostpacer::frame::Mat3* Arena::CreateMaybeMessage<::ghostpacer::frame::Mat3>(Arena*);
template<> ::ghostpacer::frame::Menu* Arena::CreateMaybeMessage<::ghostpacer::frame::Menu>(Arena*);
template<> ::ghostpacer::frame::Vec3* Arena::CreateMaybeMessage<::ghostpacer::frame::Vec3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ghostpacer {
namespace frame {

enum Banner_Position {
  Banner_Position_TOP = 0,
  Banner_Position_CENTER = 1,
  Banner_Position_Banner_Position_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Banner_Position_Banner_Position_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Banner_Position_IsValid(int value);
const Banner_Position Banner_Position_Position_MIN = Banner_Position_TOP;
const Banner_Position Banner_Position_Position_MAX = Banner_Position_CENTER;
const int Banner_Position_Position_ARRAYSIZE = Banner_Position_Position_MAX + 1;

const ::google::protobuf::EnumDescriptor* Banner_Position_descriptor();
inline const ::std::string& Banner_Position_Name(Banner_Position value) {
  return ::google::protobuf::internal::NameOfEnum(
    Banner_Position_descriptor(), value);
}
inline bool Banner_Position_Parse(
    const ::std::string& name, Banner_Position* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Banner_Position>(
    Banner_Position_descriptor(), name, value);
}
// ===================================================================

class Vec3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Vec3) */ {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vec3* other);
  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(NULL);
  }

  Vec3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Vec3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mat3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Mat3) */ {
 public:
  Mat3();
  virtual ~Mat3();

  Mat3(const Mat3& from);

  inline Mat3& operator=(const Mat3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mat3(Mat3&& from) noexcept
    : Mat3() {
    *this = ::std::move(from);
  }

  inline Mat3& operator=(Mat3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mat3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3* internal_default_instance() {
    return reinterpret_cast<const Mat3*>(
               &_Mat3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mat3* other);
  friend void swap(Mat3& a, Mat3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mat3* New() const final {
    return CreateMaybeMessage<Mat3>(NULL);
  }

  Mat3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mat3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mat3& from);
  void MergeFrom(const Mat3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ghostpacer.frame.Vec3 row1 = 1;
  bool has_row1() const;
  void clear_row1();
  static const int kRow1FieldNumber = 1;
  private:
  const ::ghostpacer::frame::Vec3& _internal_row1() const;
  public:
  const ::ghostpacer::frame::Vec3& row1() const;
  ::ghostpacer::frame::Vec3* release_row1();
  ::ghostpacer::frame::Vec3* mutable_row1();
  void set_allocated_row1(::ghostpacer::frame::Vec3* row1);

  // .ghostpacer.frame.Vec3 row2 = 2;
  bool has_row2() const;
  void clear_row2();
  static const int kRow2FieldNumber = 2;
  private:
  const ::ghostpacer::frame::Vec3& _internal_row2() const;
  public:
  const ::ghostpacer::frame::Vec3& row2() const;
  ::ghostpacer::frame::Vec3* release_row2();
  ::ghostpacer::frame::Vec3* mutable_row2();
  void set_allocated_row2(::ghostpacer::frame::Vec3* row2);

  // .ghostpacer.frame.Vec3 row3 = 3;
  bool has_row3() const;
  void clear_row3();
  static const int kRow3FieldNumber = 3;
  private:
  const ::ghostpacer::frame::Vec3& _internal_row3() const;
  public:
  const ::ghostpacer::frame::Vec3& row3() const;
  ::ghostpacer::frame::Vec3* release_row3();
  ::ghostpacer::frame::Vec3* mutable_row3();
  void set_allocated_row3(::ghostpacer::frame::Vec3* row3);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Mat3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ghostpacer::frame::Vec3* row1_;
  ::ghostpacer::frame::Vec3* row2_;
  ::ghostpacer::frame::Vec3* row3_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Avatar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Avatar) */ {
 public:
  Avatar();
  virtual ~Avatar();

  Avatar(const Avatar& from);

  inline Avatar& operator=(const Avatar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Avatar(Avatar&& from) noexcept
    : Avatar() {
    *this = ::std::move(from);
  }

  inline Avatar& operator=(Avatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Avatar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Avatar* internal_default_instance() {
    return reinterpret_cast<const Avatar*>(
               &_Avatar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Avatar* other);
  friend void swap(Avatar& a, Avatar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Avatar* New() const final {
    return CreateMaybeMessage<Avatar>(NULL);
  }

  Avatar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Avatar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Avatar& from);
  void MergeFrom(const Avatar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Avatar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ghostpacer.frame.Vec3 avatarPosition = 1;
  bool has_avatarposition() const;
  void clear_avatarposition();
  static const int kAvatarPositionFieldNumber = 1;
  private:
  const ::ghostpacer::frame::Vec3& _internal_avatarposition() const;
  public:
  const ::ghostpacer::frame::Vec3& avatarposition() const;
  ::ghostpacer::frame::Vec3* release_avatarposition();
  ::ghostpacer::frame::Vec3* mutable_avatarposition();
  void set_allocated_avatarposition(::ghostpacer::frame::Vec3* avatarposition);

  // .ghostpacer.frame.Vec3 cameraPosition = 4;
  bool has_cameraposition() const;
  void clear_cameraposition();
  static const int kCameraPositionFieldNumber = 4;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameraposition() const;
  public:
  const ::ghostpacer::frame::Vec3& cameraposition() const;
  ::ghostpacer::frame::Vec3* release_cameraposition();
  ::ghostpacer::frame::Vec3* mutable_cameraposition();
  void set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition);

  // .ghostpacer.frame.Vec3 avatarToVec = 6;
  bool has_avatartovec() const;
  void clear_avatartovec();
  static const int kAvatarToVecFieldNumber = 6;
  private:
  const ::ghostpacer::frame::Vec3& _internal_avatartovec() const;
  public:
  const ::ghostpacer::frame::Vec3& avatartovec() const;
  ::ghostpacer::frame::Vec3* release_avatartovec();
  ::ghostpacer::frame::Vec3* mutable_avatartovec();
  void set_allocated_avatartovec(::ghostpacer::frame::Vec3* avatartovec);

  // .ghostpacer.frame.Vec3 avatarUpVec = 7;
  bool has_avatarupvec() const;
  void clear_avatarupvec();
  static const int kAvatarUpVecFieldNumber = 7;
  private:
  const ::ghostpacer::frame::Vec3& _internal_avatarupvec() const;
  public:
  const ::ghostpacer::frame::Vec3& avatarupvec() const;
  ::ghostpacer::frame::Vec3* release_avatarupvec();
  ::ghostpacer::frame::Vec3* mutable_avatarupvec();
  void set_allocated_avatarupvec(::ghostpacer::frame::Vec3* avatarupvec);

  // .ghostpacer.frame.Vec3 cameraToVec = 8;
  bool has_cameratovec() const;
  void clear_cameratovec();
  static const int kCameraToVecFieldNumber = 8;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameratovec() const;
  public:
  const ::ghostpacer::frame::Vec3& cameratovec() const;
  ::ghostpacer::frame::Vec3* release_cameratovec();
  ::ghostpacer::frame::Vec3* mutable_cameratovec();
  void set_allocated_cameratovec(::ghostpacer::frame::Vec3* cameratovec);

  // .ghostpacer.frame.Vec3 cameraUpVec = 9;
  bool has_cameraupvec() const;
  void clear_cameraupvec();
  static const int kCameraUpVecFieldNumber = 9;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameraupvec() const;
  public:
  const ::ghostpacer::frame::Vec3& cameraupvec() const;
  ::ghostpacer::frame::Vec3* release_cameraupvec();
  ::ghostpacer::frame::Vec3* mutable_cameraupvec();
  void set_allocated_cameraupvec(::ghostpacer::frame::Vec3* cameraupvec);

  // double animationPhase = 3;
  void clear_animationphase();
  static const int kAnimationPhaseFieldNumber = 3;
  double animationphase() const;
  void set_animationphase(double value);

  // uint32 modelIndex = 10;
  void clear_modelindex();
  static const int kModelIndexFieldNumber = 10;
  ::google::protobuf::uint32 modelindex() const;
  void set_modelindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Avatar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ghostpacer::frame::Vec3* avatarposition_;
  ::ghostpacer::frame::Vec3* cameraposition_;
  ::ghostpacer::frame::Vec3* avatartovec_;
  ::ghostpacer::frame::Vec3* avatarupvec_;
  ::ghostpacer::frame::Vec3* cameratovec_;
  ::ghostpacer::frame::Vec3* cameraupvec_;
  double animationphase_;
  ::google::protobuf::uint32 modelindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Menu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Menu) */ {
 public:
  Menu();
  virtual ~Menu();

  Menu(const Menu& from);

  inline Menu& operator=(const Menu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Menu(Menu&& from) noexcept
    : Menu() {
    *this = ::std::move(from);
  }

  inline Menu& operator=(Menu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Menu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Menu* internal_default_instance() {
    return reinterpret_cast<const Menu*>(
               &_Menu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Menu* other);
  friend void swap(Menu& a, Menu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Menu* New() const final {
    return CreateMaybeMessage<Menu>(NULL);
  }

  Menu* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Menu>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Menu& from);
  void MergeFrom(const Menu& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Menu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::std::string& entries(int index) const;
  ::std::string* mutable_entries(int index);
  void set_entries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_entries(int index, ::std::string&& value);
  #endif
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  ::std::string* add_entries();
  void add_entries(const ::std::string& value);
  #if LANG_CXX11
  void add_entries(::std::string&& value);
  #endif
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& entries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_entries();

  // uint32 activeEntryIndex = 2;
  void clear_activeentryindex();
  static const int kActiveEntryIndexFieldNumber = 2;
  ::google::protobuf::uint32 activeentryindex() const;
  void set_activeentryindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Menu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> entries_;
  ::google::protobuf::uint32 activeentryindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Banner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Banner) */ {
 public:
  Banner();
  virtual ~Banner();

  Banner(const Banner& from);

  inline Banner& operator=(const Banner& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Banner(Banner&& from) noexcept
    : Banner() {
    *this = ::std::move(from);
  }

  inline Banner& operator=(Banner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Banner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Banner* internal_default_instance() {
    return reinterpret_cast<const Banner*>(
               &_Banner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Banner* other);
  friend void swap(Banner& a, Banner& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Banner* New() const final {
    return CreateMaybeMessage<Banner>(NULL);
  }

  Banner* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Banner>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Banner& from);
  void MergeFrom(const Banner& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Banner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Banner_Position Position;
  static const Position TOP =
    Banner_Position_TOP;
  static const Position CENTER =
    Banner_Position_CENTER;
  static inline bool Position_IsValid(int value) {
    return Banner_Position_IsValid(value);
  }
  static const Position Position_MIN =
    Banner_Position_Position_MIN;
  static const Position Position_MAX =
    Banner_Position_Position_MAX;
  static const int Position_ARRAYSIZE =
    Banner_Position_Position_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Position_descriptor() {
    return Banner_Position_descriptor();
  }
  static inline const ::std::string& Position_Name(Position value) {
    return Banner_Position_Name(value);
  }
  static inline bool Position_Parse(const ::std::string& name,
      Position* value) {
    return Banner_Position_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string lines = 1;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 1;
  const ::std::string& lines(int index) const;
  ::std::string* mutable_lines(int index);
  void set_lines(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lines(int index, ::std::string&& value);
  #endif
  void set_lines(int index, const char* value);
  void set_lines(int index, const char* value, size_t size);
  ::std::string* add_lines();
  void add_lines(const ::std::string& value);
  #if LANG_CXX11
  void add_lines(::std::string&& value);
  #endif
  void add_lines(const char* value);
  void add_lines(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lines() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lines();

  // .ghostpacer.frame.Banner.Position position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::ghostpacer::frame::Banner_Position position() const;
  void set_position(::ghostpacer::frame::Banner_Position value);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Banner)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lines_;
  int position_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Legend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Legend) */ {
 public:
  Legend();
  virtual ~Legend();

  Legend(const Legend& from);

  inline Legend& operator=(const Legend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Legend(Legend&& from) noexcept
    : Legend() {
    *this = ::std::move(from);
  }

  inline Legend& operator=(Legend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Legend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Legend* internal_default_instance() {
    return reinterpret_cast<const Legend*>(
               &_Legend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Legend* other);
  friend void swap(Legend& a, Legend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Legend* New() const final {
    return CreateMaybeMessage<Legend>(NULL);
  }

  Legend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Legend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Legend& from);
  void MergeFrom(const Legend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Legend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool upActive = 1;
  void clear_upactive();
  static const int kUpActiveFieldNumber = 1;
  bool upactive() const;
  void set_upactive(bool value);

  // bool selectActive = 2;
  void clear_selectactive();
  static const int kSelectActiveFieldNumber = 2;
  bool selectactive() const;
  void set_selectactive(bool value);

  // bool downActive = 3;
  void clear_downactive();
  static const int kDownActiveFieldNumber = 3;
  bool downactive() const;
  void set_downactive(bool value);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Legend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool upactive_;
  bool selectactive_;
  bool downactive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghostpacer.frame.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ghostpacer.frame.Avatar avatar1 = 1;
  bool has_avatar1() const;
  void clear_avatar1();
  static const int kAvatar1FieldNumber = 1;
  private:
  const ::ghostpacer::frame::Avatar& _internal_avatar1() const;
  public:
  const ::ghostpacer::frame::Avatar& avatar1() const;
  ::ghostpacer::frame::Avatar* release_avatar1();
  ::ghostpacer::frame::Avatar* mutable_avatar1();
  void set_allocated_avatar1(::ghostpacer::frame::Avatar* avatar1);

  // .ghostpacer.frame.Avatar avatar2 = 2;
  bool has_avatar2() const;
  void clear_avatar2();
  static const int kAvatar2FieldNumber = 2;
  private:
  const ::ghostpacer::frame::Avatar& _internal_avatar2() const;
  public:
  const ::ghostpacer::frame::Avatar& avatar2() const;
  ::ghostpacer::frame::Avatar* release_avatar2();
  ::ghostpacer::frame::Avatar* mutable_avatar2();
  void set_allocated_avatar2(::ghostpacer::frame::Avatar* avatar2);

  // .ghostpacer.frame.Legend legend = 3;
  bool has_legend() const;
  void clear_legend();
  static const int kLegendFieldNumber = 3;
  private:
  const ::ghostpacer::frame::Legend& _internal_legend() const;
  public:
  const ::ghostpacer::frame::Legend& legend() const;
  ::ghostpacer::frame::Legend* release_legend();
  ::ghostpacer::frame::Legend* mutable_legend();
  void set_allocated_legend(::ghostpacer::frame::Legend* legend);

  // .ghostpacer.frame.Menu menu = 4;
  bool has_menu() const;
  void clear_menu();
  static const int kMenuFieldNumber = 4;
  private:
  const ::ghostpacer::frame::Menu& _internal_menu() const;
  public:
  const ::ghostpacer::frame::Menu& menu() const;
  ::ghostpacer::frame::Menu* release_menu();
  ::ghostpacer::frame::Menu* mutable_menu();
  void set_allocated_menu(::ghostpacer::frame::Menu* menu);

  // .ghostpacer.frame.Banner banner = 5;
  bool has_banner() const;
  void clear_banner();
  static const int kBannerFieldNumber = 5;
  private:
  const ::ghostpacer::frame::Banner& _internal_banner() const;
  public:
  const ::ghostpacer::frame::Banner& banner() const;
  ::ghostpacer::frame::Banner* release_banner();
  ::ghostpacer::frame::Banner* mutable_banner();
  void set_allocated_banner(::ghostpacer::frame::Banner* banner);

  // .ghostpacer.frame.Vec3 cameraPosition = 6;
  bool has_cameraposition() const;
  void clear_cameraposition();
  static const int kCameraPositionFieldNumber = 6;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameraposition() const;
  public:
  const ::ghostpacer::frame::Vec3& cameraposition() const;
  ::ghostpacer::frame::Vec3* release_cameraposition();
  ::ghostpacer::frame::Vec3* mutable_cameraposition();
  void set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition);

  // .ghostpacer.frame.Vec3 cameraToVec = 7;
  bool has_cameratovec() const;
  void clear_cameratovec();
  static const int kCameraToVecFieldNumber = 7;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameratovec() const;
  public:
  const ::ghostpacer::frame::Vec3& cameratovec() const;
  ::ghostpacer::frame::Vec3* release_cameratovec();
  ::ghostpacer::frame::Vec3* mutable_cameratovec();
  void set_allocated_cameratovec(::ghostpacer::frame::Vec3* cameratovec);

  // .ghostpacer.frame.Vec3 cameraUpVec = 8;
  bool has_cameraupvec() const;
  void clear_cameraupvec();
  static const int kCameraUpVecFieldNumber = 8;
  private:
  const ::ghostpacer::frame::Vec3& _internal_cameraupvec() const;
  public:
  const ::ghostpacer::frame::Vec3& cameraupvec() const;
  ::ghostpacer::frame::Vec3* release_cameraupvec();
  ::ghostpacer::frame::Vec3* mutable_cameraupvec();
  void set_allocated_cameraupvec(::ghostpacer::frame::Vec3* cameraupvec);

  // @@protoc_insertion_point(class_scope:ghostpacer.frame.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ghostpacer::frame::Avatar* avatar1_;
  ::ghostpacer::frame::Avatar* avatar2_;
  ::ghostpacer::frame::Legend* legend_;
  ::ghostpacer::frame::Menu* menu_;
  ::ghostpacer::frame::Banner* banner_;
  ::ghostpacer::frame::Vec3* cameraposition_;
  ::ghostpacer::frame::Vec3* cameratovec_;
  ::ghostpacer::frame::Vec3* cameraupvec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame1_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// double x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline double Vec3::x() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.x)
  return x_;
}
inline void Vec3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.x)
}

// double y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline double Vec3::y() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.y)
  return y_;
}
inline void Vec3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.y)
}

// double z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline double Vec3::z() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Vec3.z)
  return z_;
}
inline void Vec3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Vec3.z)
}

// -------------------------------------------------------------------

// Mat3

// .ghostpacer.frame.Vec3 row1 = 1;
inline bool Mat3::has_row1() const {
  return this != internal_default_instance() && row1_ != NULL;
}
inline void Mat3::clear_row1() {
  if (GetArenaNoVirtual() == NULL && row1_ != NULL) {
    delete row1_;
  }
  row1_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row1() const {
  return *row1_;
}
inline const ::ghostpacer::frame::Vec3& Mat3::row1() const {
  const ::ghostpacer::frame::Vec3* p = row1_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row1)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row1() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row1)
  
  ::ghostpacer::frame::Vec3* temp = row1_;
  row1_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row1() {
  
  if (row1_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    row1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row1)
  return row1_;
}
inline void Mat3::set_allocated_row1(::ghostpacer::frame::Vec3* row1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete row1_;
  }
  if (row1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      row1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, row1, submessage_arena);
    }
    
  } else {
    
  }
  row1_ = row1;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row1)
}

// .ghostpacer.frame.Vec3 row2 = 2;
inline bool Mat3::has_row2() const {
  return this != internal_default_instance() && row2_ != NULL;
}
inline void Mat3::clear_row2() {
  if (GetArenaNoVirtual() == NULL && row2_ != NULL) {
    delete row2_;
  }
  row2_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row2() const {
  return *row2_;
}
inline const ::ghostpacer::frame::Vec3& Mat3::row2() const {
  const ::ghostpacer::frame::Vec3* p = row2_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row2)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row2() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row2)
  
  ::ghostpacer::frame::Vec3* temp = row2_;
  row2_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row2() {
  
  if (row2_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    row2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row2)
  return row2_;
}
inline void Mat3::set_allocated_row2(::ghostpacer::frame::Vec3* row2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete row2_;
  }
  if (row2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      row2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, row2, submessage_arena);
    }
    
  } else {
    
  }
  row2_ = row2;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row2)
}

// .ghostpacer.frame.Vec3 row3 = 3;
inline bool Mat3::has_row3() const {
  return this != internal_default_instance() && row3_ != NULL;
}
inline void Mat3::clear_row3() {
  if (GetArenaNoVirtual() == NULL && row3_ != NULL) {
    delete row3_;
  }
  row3_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Mat3::_internal_row3() const {
  return *row3_;
}
inline const ::ghostpacer::frame::Vec3& Mat3::row3() const {
  const ::ghostpacer::frame::Vec3* p = row3_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Mat3.row3)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Mat3::release_row3() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Mat3.row3)
  
  ::ghostpacer::frame::Vec3* temp = row3_;
  row3_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Mat3::mutable_row3() {
  
  if (row3_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    row3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Mat3.row3)
  return row3_;
}
inline void Mat3::set_allocated_row3(::ghostpacer::frame::Vec3* row3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete row3_;
  }
  if (row3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      row3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, row3, submessage_arena);
    }
    
  } else {
    
  }
  row3_ = row3;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Mat3.row3)
}

// -------------------------------------------------------------------

// Avatar

// .ghostpacer.frame.Vec3 avatarPosition = 1;
inline bool Avatar::has_avatarposition() const {
  return this != internal_default_instance() && avatarposition_ != NULL;
}
inline void Avatar::clear_avatarposition() {
  if (GetArenaNoVirtual() == NULL && avatarposition_ != NULL) {
    delete avatarposition_;
  }
  avatarposition_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_avatarposition() const {
  return *avatarposition_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::avatarposition() const {
  const ::ghostpacer::frame::Vec3* p = avatarposition_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.avatarPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_avatarposition() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.avatarPosition)
  
  ::ghostpacer::frame::Vec3* temp = avatarposition_;
  avatarposition_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_avatarposition() {
  
  if (avatarposition_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    avatarposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.avatarPosition)
  return avatarposition_;
}
inline void Avatar::set_allocated_avatarposition(::ghostpacer::frame::Vec3* avatarposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avatarposition_;
  }
  if (avatarposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatarposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatarposition, submessage_arena);
    }
    
  } else {
    
  }
  avatarposition_ = avatarposition;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.avatarPosition)
}

// .ghostpacer.frame.Vec3 avatarToVec = 6;
inline bool Avatar::has_avatartovec() const {
  return this != internal_default_instance() && avatartovec_ != NULL;
}
inline void Avatar::clear_avatartovec() {
  if (GetArenaNoVirtual() == NULL && avatartovec_ != NULL) {
    delete avatartovec_;
  }
  avatartovec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_avatartovec() const {
  return *avatartovec_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::avatartovec() const {
  const ::ghostpacer::frame::Vec3* p = avatartovec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.avatarToVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_avatartovec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.avatarToVec)
  
  ::ghostpacer::frame::Vec3* temp = avatartovec_;
  avatartovec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_avatartovec() {
  
  if (avatartovec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    avatartovec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.avatarToVec)
  return avatartovec_;
}
inline void Avatar::set_allocated_avatartovec(::ghostpacer::frame::Vec3* avatartovec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avatartovec_;
  }
  if (avatartovec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatartovec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatartovec, submessage_arena);
    }
    
  } else {
    
  }
  avatartovec_ = avatartovec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.avatarToVec)
}

// .ghostpacer.frame.Vec3 avatarUpVec = 7;
inline bool Avatar::has_avatarupvec() const {
  return this != internal_default_instance() && avatarupvec_ != NULL;
}
inline void Avatar::clear_avatarupvec() {
  if (GetArenaNoVirtual() == NULL && avatarupvec_ != NULL) {
    delete avatarupvec_;
  }
  avatarupvec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_avatarupvec() const {
  return *avatarupvec_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::avatarupvec() const {
  const ::ghostpacer::frame::Vec3* p = avatarupvec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.avatarUpVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_avatarupvec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.avatarUpVec)
  
  ::ghostpacer::frame::Vec3* temp = avatarupvec_;
  avatarupvec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_avatarupvec() {
  
  if (avatarupvec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    avatarupvec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.avatarUpVec)
  return avatarupvec_;
}
inline void Avatar::set_allocated_avatarupvec(::ghostpacer::frame::Vec3* avatarupvec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avatarupvec_;
  }
  if (avatarupvec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatarupvec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatarupvec, submessage_arena);
    }
    
  } else {
    
  }
  avatarupvec_ = avatarupvec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.avatarUpVec)
}

// double animationPhase = 3;
inline void Avatar::clear_animationphase() {
  animationphase_ = 0;
}
inline double Avatar::animationphase() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.animationPhase)
  return animationphase_;
}
inline void Avatar::set_animationphase(double value) {
  
  animationphase_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Avatar.animationPhase)
}

// .ghostpacer.frame.Vec3 cameraPosition = 4;
inline bool Avatar::has_cameraposition() const {
  return this != internal_default_instance() && cameraposition_ != NULL;
}
inline void Avatar::clear_cameraposition() {
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) {
    delete cameraposition_;
  }
  cameraposition_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_cameraposition() const {
  return *cameraposition_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::cameraposition() const {
  const ::ghostpacer::frame::Vec3* p = cameraposition_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.cameraPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_cameraposition() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.cameraPosition)
  
  ::ghostpacer::frame::Vec3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_cameraposition() {
  
  if (cameraposition_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameraposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.cameraPosition)
  return cameraposition_;
}
inline void Avatar::set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraposition_;
  }
  if (cameraposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraposition, submessage_arena);
    }
    
  } else {
    
  }
  cameraposition_ = cameraposition;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.cameraPosition)
}

// .ghostpacer.frame.Vec3 cameraToVec = 8;
inline bool Avatar::has_cameratovec() const {
  return this != internal_default_instance() && cameratovec_ != NULL;
}
inline void Avatar::clear_cameratovec() {
  if (GetArenaNoVirtual() == NULL && cameratovec_ != NULL) {
    delete cameratovec_;
  }
  cameratovec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_cameratovec() const {
  return *cameratovec_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::cameratovec() const {
  const ::ghostpacer::frame::Vec3* p = cameratovec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.cameraToVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_cameratovec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.cameraToVec)
  
  ::ghostpacer::frame::Vec3* temp = cameratovec_;
  cameratovec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_cameratovec() {
  
  if (cameratovec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameratovec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.cameraToVec)
  return cameratovec_;
}
inline void Avatar::set_allocated_cameratovec(::ghostpacer::frame::Vec3* cameratovec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameratovec_;
  }
  if (cameratovec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameratovec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameratovec, submessage_arena);
    }
    
  } else {
    
  }
  cameratovec_ = cameratovec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.cameraToVec)
}

// .ghostpacer.frame.Vec3 cameraUpVec = 9;
inline bool Avatar::has_cameraupvec() const {
  return this != internal_default_instance() && cameraupvec_ != NULL;
}
inline void Avatar::clear_cameraupvec() {
  if (GetArenaNoVirtual() == NULL && cameraupvec_ != NULL) {
    delete cameraupvec_;
  }
  cameraupvec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Avatar::_internal_cameraupvec() const {
  return *cameraupvec_;
}
inline const ::ghostpacer::frame::Vec3& Avatar::cameraupvec() const {
  const ::ghostpacer::frame::Vec3* p = cameraupvec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.cameraUpVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Avatar::release_cameraupvec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Avatar.cameraUpVec)
  
  ::ghostpacer::frame::Vec3* temp = cameraupvec_;
  cameraupvec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Avatar::mutable_cameraupvec() {
  
  if (cameraupvec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameraupvec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Avatar.cameraUpVec)
  return cameraupvec_;
}
inline void Avatar::set_allocated_cameraupvec(::ghostpacer::frame::Vec3* cameraupvec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraupvec_;
  }
  if (cameraupvec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraupvec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraupvec, submessage_arena);
    }
    
  } else {
    
  }
  cameraupvec_ = cameraupvec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Avatar.cameraUpVec)
}

// uint32 modelIndex = 10;
inline void Avatar::clear_modelindex() {
  modelindex_ = 0u;
}
inline ::google::protobuf::uint32 Avatar::modelindex() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Avatar.modelIndex)
  return modelindex_;
}
inline void Avatar::set_modelindex(::google::protobuf::uint32 value) {
  
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Avatar.modelIndex)
}

// -------------------------------------------------------------------

// Menu

// repeated string entries = 1;
inline int Menu::entries_size() const {
  return entries_.size();
}
inline void Menu::clear_entries() {
  entries_.Clear();
}
inline const ::std::string& Menu::entries(int index) const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Menu.entries)
  return entries_.Get(index);
}
inline ::std::string* Menu::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Menu.entries)
  return entries_.Mutable(index);
}
inline void Menu::set_entries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.entries)
  entries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Menu::set_entries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.entries)
  entries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Menu::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ghostpacer.frame.Menu.entries)
}
inline void Menu::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.frame.Menu.entries)
}
inline ::std::string* Menu::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:ghostpacer.frame.Menu.entries)
  return entries_.Add();
}
inline void Menu::add_entries(const ::std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Menu.entries)
}
#if LANG_CXX11
inline void Menu::add_entries(::std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Menu.entries)
}
#endif
inline void Menu::add_entries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ghostpacer.frame.Menu.entries)
}
inline void Menu::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ghostpacer.frame.Menu.entries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Menu::entries() const {
  // @@protoc_insertion_point(field_list:ghostpacer.frame.Menu.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Menu::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ghostpacer.frame.Menu.entries)
  return &entries_;
}

// uint32 activeEntryIndex = 2;
inline void Menu::clear_activeentryindex() {
  activeentryindex_ = 0u;
}
inline ::google::protobuf::uint32 Menu::activeentryindex() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Menu.activeEntryIndex)
  return activeentryindex_;
}
inline void Menu::set_activeentryindex(::google::protobuf::uint32 value) {
  
  activeentryindex_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Menu.activeEntryIndex)
}

// -------------------------------------------------------------------

// Banner

// repeated string lines = 1;
inline int Banner::lines_size() const {
  return lines_.size();
}
inline void Banner::clear_lines() {
  lines_.Clear();
}
inline const ::std::string& Banner::lines(int index) const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Banner.lines)
  return lines_.Get(index);
}
inline ::std::string* Banner::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Banner.lines)
  return lines_.Mutable(index);
}
inline void Banner::set_lines(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.lines)
  lines_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Banner::set_lines(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.lines)
  lines_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Banner::set_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ghostpacer.frame.Banner.lines)
}
inline void Banner::set_lines(int index, const char* value, size_t size) {
  lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ghostpacer.frame.Banner.lines)
}
inline ::std::string* Banner::add_lines() {
  // @@protoc_insertion_point(field_add_mutable:ghostpacer.frame.Banner.lines)
  return lines_.Add();
}
inline void Banner::add_lines(const ::std::string& value) {
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Banner.lines)
}
#if LANG_CXX11
inline void Banner::add_lines(::std::string&& value) {
  lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ghostpacer.frame.Banner.lines)
}
#endif
inline void Banner::add_lines(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ghostpacer.frame.Banner.lines)
}
inline void Banner::add_lines(const char* value, size_t size) {
  lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ghostpacer.frame.Banner.lines)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Banner::lines() const {
  // @@protoc_insertion_point(field_list:ghostpacer.frame.Banner.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Banner::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:ghostpacer.frame.Banner.lines)
  return &lines_;
}

// .ghostpacer.frame.Banner.Position position = 2;
inline void Banner::clear_position() {
  position_ = 0;
}
inline ::ghostpacer::frame::Banner_Position Banner::position() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Banner.position)
  return static_cast< ::ghostpacer::frame::Banner_Position >(position_);
}
inline void Banner::set_position(::ghostpacer::frame::Banner_Position value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Banner.position)
}

// -------------------------------------------------------------------

// Legend

// bool upActive = 1;
inline void Legend::clear_upactive() {
  upactive_ = false;
}
inline bool Legend::upactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.upActive)
  return upactive_;
}
inline void Legend::set_upactive(bool value) {
  
  upactive_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.upActive)
}

// bool selectActive = 2;
inline void Legend::clear_selectactive() {
  selectactive_ = false;
}
inline bool Legend::selectactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.selectActive)
  return selectactive_;
}
inline void Legend::set_selectactive(bool value) {
  
  selectactive_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.selectActive)
}

// bool downActive = 3;
inline void Legend::clear_downactive() {
  downactive_ = false;
}
inline bool Legend::downactive() const {
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Legend.downActive)
  return downactive_;
}
inline void Legend::set_downactive(bool value) {
  
  downactive_ = value;
  // @@protoc_insertion_point(field_set:ghostpacer.frame.Legend.downActive)
}

// -------------------------------------------------------------------

// Frame

// .ghostpacer.frame.Avatar avatar1 = 1;
inline bool Frame::has_avatar1() const {
  return this != internal_default_instance() && avatar1_ != NULL;
}
inline void Frame::clear_avatar1() {
  if (GetArenaNoVirtual() == NULL && avatar1_ != NULL) {
    delete avatar1_;
  }
  avatar1_ = NULL;
}
inline const ::ghostpacer::frame::Avatar& Frame::_internal_avatar1() const {
  return *avatar1_;
}
inline const ::ghostpacer::frame::Avatar& Frame::avatar1() const {
  const ::ghostpacer::frame::Avatar* p = avatar1_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.avatar1)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Avatar*>(
      &::ghostpacer::frame::_Avatar_default_instance_);
}
inline ::ghostpacer::frame::Avatar* Frame::release_avatar1() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.avatar1)
  
  ::ghostpacer::frame::Avatar* temp = avatar1_;
  avatar1_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Avatar* Frame::mutable_avatar1() {
  
  if (avatar1_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Avatar>(GetArenaNoVirtual());
    avatar1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.avatar1)
  return avatar1_;
}
inline void Frame::set_allocated_avatar1(::ghostpacer::frame::Avatar* avatar1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avatar1_;
  }
  if (avatar1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatar1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatar1, submessage_arena);
    }
    
  } else {
    
  }
  avatar1_ = avatar1;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.avatar1)
}

// .ghostpacer.frame.Avatar avatar2 = 2;
inline bool Frame::has_avatar2() const {
  return this != internal_default_instance() && avatar2_ != NULL;
}
inline void Frame::clear_avatar2() {
  if (GetArenaNoVirtual() == NULL && avatar2_ != NULL) {
    delete avatar2_;
  }
  avatar2_ = NULL;
}
inline const ::ghostpacer::frame::Avatar& Frame::_internal_avatar2() const {
  return *avatar2_;
}
inline const ::ghostpacer::frame::Avatar& Frame::avatar2() const {
  const ::ghostpacer::frame::Avatar* p = avatar2_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.avatar2)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Avatar*>(
      &::ghostpacer::frame::_Avatar_default_instance_);
}
inline ::ghostpacer::frame::Avatar* Frame::release_avatar2() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.avatar2)
  
  ::ghostpacer::frame::Avatar* temp = avatar2_;
  avatar2_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Avatar* Frame::mutable_avatar2() {
  
  if (avatar2_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Avatar>(GetArenaNoVirtual());
    avatar2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.avatar2)
  return avatar2_;
}
inline void Frame::set_allocated_avatar2(::ghostpacer::frame::Avatar* avatar2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avatar2_;
  }
  if (avatar2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatar2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatar2, submessage_arena);
    }
    
  } else {
    
  }
  avatar2_ = avatar2;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.avatar2)
}

// .ghostpacer.frame.Legend legend = 3;
inline bool Frame::has_legend() const {
  return this != internal_default_instance() && legend_ != NULL;
}
inline void Frame::clear_legend() {
  if (GetArenaNoVirtual() == NULL && legend_ != NULL) {
    delete legend_;
  }
  legend_ = NULL;
}
inline const ::ghostpacer::frame::Legend& Frame::_internal_legend() const {
  return *legend_;
}
inline const ::ghostpacer::frame::Legend& Frame::legend() const {
  const ::ghostpacer::frame::Legend* p = legend_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.legend)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Legend*>(
      &::ghostpacer::frame::_Legend_default_instance_);
}
inline ::ghostpacer::frame::Legend* Frame::release_legend() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.legend)
  
  ::ghostpacer::frame::Legend* temp = legend_;
  legend_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Legend* Frame::mutable_legend() {
  
  if (legend_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Legend>(GetArenaNoVirtual());
    legend_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.legend)
  return legend_;
}
inline void Frame::set_allocated_legend(::ghostpacer::frame::Legend* legend) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete legend_;
  }
  if (legend) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      legend = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, legend, submessage_arena);
    }
    
  } else {
    
  }
  legend_ = legend;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.legend)
}

// .ghostpacer.frame.Menu menu = 4;
inline bool Frame::has_menu() const {
  return this != internal_default_instance() && menu_ != NULL;
}
inline void Frame::clear_menu() {
  if (GetArenaNoVirtual() == NULL && menu_ != NULL) {
    delete menu_;
  }
  menu_ = NULL;
}
inline const ::ghostpacer::frame::Menu& Frame::_internal_menu() const {
  return *menu_;
}
inline const ::ghostpacer::frame::Menu& Frame::menu() const {
  const ::ghostpacer::frame::Menu* p = menu_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.menu)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Menu*>(
      &::ghostpacer::frame::_Menu_default_instance_);
}
inline ::ghostpacer::frame::Menu* Frame::release_menu() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.menu)
  
  ::ghostpacer::frame::Menu* temp = menu_;
  menu_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Menu* Frame::mutable_menu() {
  
  if (menu_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Menu>(GetArenaNoVirtual());
    menu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.menu)
  return menu_;
}
inline void Frame::set_allocated_menu(::ghostpacer::frame::Menu* menu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete menu_;
  }
  if (menu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      menu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, menu, submessage_arena);
    }
    
  } else {
    
  }
  menu_ = menu;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.menu)
}

// .ghostpacer.frame.Banner banner = 5;
inline bool Frame::has_banner() const {
  return this != internal_default_instance() && banner_ != NULL;
}
inline void Frame::clear_banner() {
  if (GetArenaNoVirtual() == NULL && banner_ != NULL) {
    delete banner_;
  }
  banner_ = NULL;
}
inline const ::ghostpacer::frame::Banner& Frame::_internal_banner() const {
  return *banner_;
}
inline const ::ghostpacer::frame::Banner& Frame::banner() const {
  const ::ghostpacer::frame::Banner* p = banner_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.banner)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Banner*>(
      &::ghostpacer::frame::_Banner_default_instance_);
}
inline ::ghostpacer::frame::Banner* Frame::release_banner() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.banner)
  
  ::ghostpacer::frame::Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Banner* Frame::mutable_banner() {
  
  if (banner_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Banner>(GetArenaNoVirtual());
    banner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.banner)
  return banner_;
}
inline void Frame::set_allocated_banner(::ghostpacer::frame::Banner* banner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete banner_;
  }
  if (banner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      banner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, banner, submessage_arena);
    }
    
  } else {
    
  }
  banner_ = banner;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.banner)
}

// .ghostpacer.frame.Vec3 cameraPosition = 6;
inline bool Frame::has_cameraposition() const {
  return this != internal_default_instance() && cameraposition_ != NULL;
}
inline void Frame::clear_cameraposition() {
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) {
    delete cameraposition_;
  }
  cameraposition_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Frame::_internal_cameraposition() const {
  return *cameraposition_;
}
inline const ::ghostpacer::frame::Vec3& Frame::cameraposition() const {
  const ::ghostpacer::frame::Vec3* p = cameraposition_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.cameraPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Frame::release_cameraposition() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.cameraPosition)
  
  ::ghostpacer::frame::Vec3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Frame::mutable_cameraposition() {
  
  if (cameraposition_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameraposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.cameraPosition)
  return cameraposition_;
}
inline void Frame::set_allocated_cameraposition(::ghostpacer::frame::Vec3* cameraposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraposition_;
  }
  if (cameraposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraposition, submessage_arena);
    }
    
  } else {
    
  }
  cameraposition_ = cameraposition;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.cameraPosition)
}

// .ghostpacer.frame.Vec3 cameraToVec = 7;
inline bool Frame::has_cameratovec() const {
  return this != internal_default_instance() && cameratovec_ != NULL;
}
inline void Frame::clear_cameratovec() {
  if (GetArenaNoVirtual() == NULL && cameratovec_ != NULL) {
    delete cameratovec_;
  }
  cameratovec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Frame::_internal_cameratovec() const {
  return *cameratovec_;
}
inline const ::ghostpacer::frame::Vec3& Frame::cameratovec() const {
  const ::ghostpacer::frame::Vec3* p = cameratovec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.cameraToVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Frame::release_cameratovec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.cameraToVec)
  
  ::ghostpacer::frame::Vec3* temp = cameratovec_;
  cameratovec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Frame::mutable_cameratovec() {
  
  if (cameratovec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameratovec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.cameraToVec)
  return cameratovec_;
}
inline void Frame::set_allocated_cameratovec(::ghostpacer::frame::Vec3* cameratovec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameratovec_;
  }
  if (cameratovec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameratovec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameratovec, submessage_arena);
    }
    
  } else {
    
  }
  cameratovec_ = cameratovec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.cameraToVec)
}

// .ghostpacer.frame.Vec3 cameraUpVec = 8;
inline bool Frame::has_cameraupvec() const {
  return this != internal_default_instance() && cameraupvec_ != NULL;
}
inline void Frame::clear_cameraupvec() {
  if (GetArenaNoVirtual() == NULL && cameraupvec_ != NULL) {
    delete cameraupvec_;
  }
  cameraupvec_ = NULL;
}
inline const ::ghostpacer::frame::Vec3& Frame::_internal_cameraupvec() const {
  return *cameraupvec_;
}
inline const ::ghostpacer::frame::Vec3& Frame::cameraupvec() const {
  const ::ghostpacer::frame::Vec3* p = cameraupvec_;
  // @@protoc_insertion_point(field_get:ghostpacer.frame.Frame.cameraUpVec)
  return p != NULL ? *p : *reinterpret_cast<const ::ghostpacer::frame::Vec3*>(
      &::ghostpacer::frame::_Vec3_default_instance_);
}
inline ::ghostpacer::frame::Vec3* Frame::release_cameraupvec() {
  // @@protoc_insertion_point(field_release:ghostpacer.frame.Frame.cameraUpVec)
  
  ::ghostpacer::frame::Vec3* temp = cameraupvec_;
  cameraupvec_ = NULL;
  return temp;
}
inline ::ghostpacer::frame::Vec3* Frame::mutable_cameraupvec() {
  
  if (cameraupvec_ == NULL) {
    auto* p = CreateMaybeMessage<::ghostpacer::frame::Vec3>(GetArenaNoVirtual());
    cameraupvec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghostpacer.frame.Frame.cameraUpVec)
  return cameraupvec_;
}
inline void Frame::set_allocated_cameraupvec(::ghostpacer::frame::Vec3* cameraupvec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraupvec_;
  }
  if (cameraupvec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraupvec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraupvec, submessage_arena);
    }
    
  } else {
    
  }
  cameraupvec_ = cameraupvec;
  // @@protoc_insertion_point(field_set_allocated:ghostpacer.frame.Frame.cameraUpVec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frame
}  // namespace ghostpacer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ghostpacer::frame::Banner_Position> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ghostpacer::frame::Banner_Position>() {
  return ::ghostpacer::frame::Banner_Position_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_frame1_2eproto
